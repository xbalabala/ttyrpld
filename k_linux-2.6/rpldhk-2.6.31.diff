---
 drivers/char/pty.c          |    2 +-
 drivers/char/rpldhk_ttyio.h |   59 +++++++++++++++++++++++++++++++++++
 drivers/char/tty_io.c       |   30 +++++++++++++++--
 include/linux/rpldhk.h      |   18 ++++++++++
 include/linux/tty.h         |    2 +-
 security/Kconfig            |    8 +++++
 6 files changed, 113 insertions(+), 6 deletions(-)
 create mode 100644 drivers/char/rpldhk_ttyio.h
 create mode 100644 include/linux/rpldhk.h

diff --git a/drivers/char/pty.c b/drivers/char/pty.c
index b33d668..48df1f6 100644
--- a/drivers/char/pty.c
+++ b/drivers/char/pty.c
@@ -637,7 +637,7 @@ static int __ptmx_open(struct inode *inode, struct file *filp)
 		return index;
 
 	mutex_lock(&tty_mutex);
-	tty = tty_init_dev(ptm_driver, index, 1);
+	tty = tty_init_dev(ptm_driver, index, 1, filp);
 	mutex_unlock(&tty_mutex);
 
 	if (IS_ERR(tty)) {
diff --git a/drivers/char/rpldhk_ttyio.h b/drivers/char/rpldhk_ttyio.h
new file mode 100644
index 0000000..46cae25
--- /dev/null
+++ b/drivers/char/rpldhk_ttyio.h
@@ -0,0 +1,59 @@
+#include <linux/types.h>
+
+struct file;
+struct tty_struct;
+
+#ifdef CONFIG_RPLDHK
+
+static inline void rpldhk_open(const struct tty_struct *tty,
+    const struct file *filp)
+{
+	typeof(rpl_open) tmp = rpl_open;
+	if (tmp != NULL)
+		tmp(tty, filp);
+}
+
+static inline void rpldhk_read(const char *buf, size_t size,
+    const struct tty_struct *tty)
+{
+	typeof(rpl_read) tmp = rpl_read;
+	if (tmp != NULL)
+		tmp(buf, size, tty);
+}
+
+static inline void rpldhk_write(const char *buf, size_t size,
+    const struct tty_struct *tty)
+{
+	typeof(rpl_write) tmp = rpl_write;
+	if (tmp != NULL)
+		tmp(buf, size, tty);
+}
+
+static inline void rpldhk_lclose(const struct tty_struct *tty,
+    const struct tty_struct *o_tty)
+{
+	typeof(rpl_lclose) tmp = rpl_lclose;
+	if (tmp != NULL)
+		tmp(tty, o_tty);
+}
+
+#else /* CONFIG_RPLDHK */
+
+static inline void rpldhk_open(const struct tty_struct *tty,
+    const struct file *filp)
+{
+}
+
+static inline void rpldhk_read(const char __user *buf, size_t size,
+    const struct tty_struct *tty)
+{
+}
+
+#define rpldhk_write rpldhk_read /* same signature */
+
+static inline void rpldhk_lclose(const struct tty_struct *tty,
+    const struct tty_struct *o_tty)
+{
+}
+
+#endif /* CONFIG_RPLDHK */
diff --git a/drivers/char/tty_io.c b/drivers/char/tty_io.c
index a3afa0c..e402d98 100644
--- a/drivers/char/tty_io.c
+++ b/drivers/char/tty_io.c
@@ -107,6 +107,19 @@
 #include <linux/kmod.h>
 #include <linux/nsproxy.h>
 
+#include <linux/rpldhk.h>
+#include "rpldhk_ttyio.h"
+#ifdef CONFIG_RPLDHK
+int (*rpl_open)(const struct tty_struct *, const struct file *);
+int (*rpl_read)(const char __user *, size_t, const struct tty_struct *);
+int (*rpl_write)(const char __user *, size_t, const struct tty_struct *);
+int (*rpl_lclose)(const struct tty_struct *, const struct tty_struct *);
+EXPORT_SYMBOL_GPL(rpl_open);
+EXPORT_SYMBOL_GPL(rpl_read);
+EXPORT_SYMBOL_GPL(rpl_write);
+EXPORT_SYMBOL_GPL(rpl_lclose);
+#endif
+
 #undef TTY_DEBUG_HANGUP
 
 #define TTY_PARANOIA_CHECK 1
@@ -893,8 +906,10 @@ static ssize_t tty_read(struct file *file, char __user *buf, size_t count,
 	else
 		i = -EIO;
 	tty_ldisc_deref(ld);
-	if (i > 0)
+	if (i > 0) {
 		inode->i_atime = current_fs_time(inode->i_sb);
+		rpldhk_read(buf, i, tty);
+	}
 	return i;
 }
 
@@ -1066,8 +1081,11 @@ static ssize_t tty_write(struct file *file, const char __user *buf,
 	ld = tty_ldisc_ref_wait(tty);
 	if (!ld->ops->write)
 		ret = -EIO;
-	else
+	else {
 		ret = do_tty_write(ld->ops->write, tty, file, buf, count);
+		if (ret > 0)
+			rpldhk_write(buf, ret, tty);
+	}
 	tty_ldisc_deref(ld);
 	return ret;
 }
@@ -1296,7 +1314,7 @@ static int tty_reopen(struct tty_struct *tty)
  */
 
 struct tty_struct *tty_init_dev(struct tty_driver *driver, int idx,
-								int first_ok)
+    int first_ok, struct file *filp)
 {
 	struct tty_struct *tty;
 	int retval;
@@ -1645,6 +1663,8 @@ void tty_release_dev(struct file *filp)
 	if (!tty_closing || (o_tty && !o_tty_closing))
 		return;
 
+	rpldhk_lclose(tty, o_tty);
+
 #ifdef TTY_DEBUG_HANGUP
 	printk(KERN_DEBUG "freeing tty structure...");
 #endif
@@ -1761,7 +1781,7 @@ got_driver:
 		if (retval)
 			tty = ERR_PTR(retval);
 	} else
-		tty = tty_init_dev(driver, index, 0);
+		tty = tty_init_dev(driver, index, 0, filp);
 
 	mutex_unlock(&tty_mutex);
 	tty_driver_kref_put(driver);
@@ -1817,6 +1837,7 @@ got_driver:
 		__proc_set_tty(current, tty);
 	spin_unlock_irq(&current->sighand->siglock);
 	mutex_unlock(&tty_mutex);
+	rpldhk_open(tty, filp);
 	return 0;
 }
 
@@ -3093,6 +3114,7 @@ static int __init tty_init(void)
 #ifdef CONFIG_VT
 	vty_init(&console_fops);
 #endif
+	printk(KERN_INFO "rpldhk 2.40, by Jan Engelhardt, 2004 - 2009\n");
 	return 0;
 }
 module_init(tty_init);
diff --git a/include/linux/rpldhk.h b/include/linux/rpldhk.h
new file mode 100644
index 0000000..f2b26c1
--- /dev/null
+++ b/include/linux/rpldhk.h
@@ -0,0 +1,18 @@
+#ifndef _LINUX_RPLDHK_H
+#define _LINUX_RPLDHK_H
+
+#ifdef __KERNEL__
+
+#include <linux/types.h>
+
+struct file;
+struct tty_struct;
+
+extern int (*rpl_open)(const struct tty_struct *, const struct file *);
+extern int (*rpl_read)(const char __user *, size_t, const struct tty_struct *);
+extern int (*rpl_write)(const char __user *, size_t, const struct tty_struct *);
+extern int (*rpl_lclose)(const struct tty_struct *, const struct tty_struct *);
+
+#endif /* __KERNEL__ */
+
+#endif /* _LINUX_RPLDHK_H */
diff --git a/include/linux/tty.h b/include/linux/tty.h
index e8c6c91..77f66a7 100644
--- a/include/linux/tty.h
+++ b/include/linux/tty.h
@@ -430,7 +430,7 @@ extern void free_tty_struct(struct tty_struct *tty);
 extern void initialize_tty_struct(struct tty_struct *tty,
 		struct tty_driver *driver, int idx);
 extern struct tty_struct *tty_init_dev(struct tty_driver *driver, int idx,
-								int first_ok);
+	int first_ok, struct file *filp);
 extern void tty_release_dev(struct file *filp);
 extern int tty_init_termios(struct tty_struct *tty);
 
diff --git a/security/Kconfig b/security/Kconfig
index 4c86534..ce0c78e 100644
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -4,6 +4,14 @@
 
 menu "Security options"
 
+config RPLDHK
+	bool "rpldhk (hooks for tty logging)"
+	---help---
+	Inserts hooks into the tty code for logger implementations to
+	hook into, allowing for minimal overhead when no implementation
+	is currently active.
+	If unsure, say N.
+
 config KEYS
 	bool "Enable access key retention support"
 	help
-- 
# Created with git-export-patch
