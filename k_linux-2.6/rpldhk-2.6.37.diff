---
 drivers/tty/pty.c          |    2 -
 drivers/tty/rpldhk_ttyio.h |   59 +++++++++++++++++++++++++++++++++++++++++++++
 drivers/tty/tty_io.c       |   29 +++++++++++++++++++---
 include/linux/rpldhk.h     |   18 +++++++++++++
 include/linux/tty.h        |    2 -
 security/Kconfig           |    8 ++++++
 6 files changed, 112 insertions(+), 6 deletions(-)
 create mode 100644 drivers/char/rpldhk_ttyio.h
 create mode 100644 include/linux/rpldhk.h

Index: linux-2.6.36/drivers/tty/pty.c
===================================================================
--- linux-2.6.36.orig/drivers/tty/pty.c
+++ linux-2.6.36/drivers/tty/pty.c
@@ -666,7 +666,7 @@ static int ptmx_open(struct inode *inode
 
 	mutex_lock(&tty_mutex);
 	tty_lock();
-	tty = tty_init_dev(ptm_driver, index, 1);
+	tty = tty_init_dev(ptm_driver, index, 1, filp);
 	mutex_unlock(&tty_mutex);
 
 	if (IS_ERR(tty)) {
Index: linux-2.6.36/drivers/tty/rpldhk_ttyio.h
===================================================================
--- /dev/null
+++ linux-2.6.36/drivers/tty/rpldhk_ttyio.h
@@ -0,0 +1,59 @@
+#include <linux/types.h>
+
+struct file;
+struct tty_struct;
+
+#ifdef CONFIG_RPLDHK
+
+static inline void rpldhk_open(const struct tty_struct *tty,
+    const struct file *filp)
+{
+	typeof(rpl_open) tmp = rpl_open;
+	if (tmp != NULL)
+		tmp(tty, filp);
+}
+
+static inline void rpldhk_read(const char *buf, size_t size,
+    const struct tty_struct *tty)
+{
+	typeof(rpl_read) tmp = rpl_read;
+	if (tmp != NULL)
+		tmp(buf, size, tty);
+}
+
+static inline void rpldhk_write(const char *buf, size_t size,
+    const struct tty_struct *tty)
+{
+	typeof(rpl_write) tmp = rpl_write;
+	if (tmp != NULL)
+		tmp(buf, size, tty);
+}
+
+static inline void rpldhk_lclose(const struct tty_struct *tty,
+    const struct tty_struct *o_tty)
+{
+	typeof(rpl_lclose) tmp = rpl_lclose;
+	if (tmp != NULL)
+		tmp(tty, o_tty);
+}
+
+#else /* CONFIG_RPLDHK */
+
+static inline void rpldhk_open(const struct tty_struct *tty,
+    const struct file *filp)
+{
+}
+
+static inline void rpldhk_read(const char __user *buf, size_t size,
+    const struct tty_struct *tty)
+{
+}
+
+#define rpldhk_write rpldhk_read /* same signature */
+
+static inline void rpldhk_lclose(const struct tty_struct *tty,
+    const struct tty_struct *o_tty)
+{
+}
+
+#endif /* CONFIG_RPLDHK */
Index: linux-2.6.36/drivers/tty/tty_io.c
===================================================================
--- linux-2.6.36.orig/drivers/tty/tty_io.c
+++ linux-2.6.36/drivers/tty/tty_io.c
@@ -108,6 +108,19 @@
 #include <linux/kmod.h>
 #include <linux/nsproxy.h>
 
+#include <linux/rpldhk.h>
+#include "rpldhk_ttyio.h"
+#ifdef CONFIG_RPLDHK
+int (*rpl_open)(const struct tty_struct *, const struct file *);
+int (*rpl_read)(const char __user *, size_t, const struct tty_struct *);
+int (*rpl_write)(const char __user *, size_t, const struct tty_struct *);
+int (*rpl_lclose)(const struct tty_struct *, const struct tty_struct *);
+EXPORT_SYMBOL_GPL(rpl_open);
+EXPORT_SYMBOL_GPL(rpl_read);
+EXPORT_SYMBOL_GPL(rpl_write);
+EXPORT_SYMBOL_GPL(rpl_lclose);
+#endif
+
 #undef TTY_DEBUG_HANGUP
 
 #define TTY_PARANOIA_CHECK 1
@@ -959,8 +972,10 @@ static ssize_t tty_read(struct file *fil
 	else
 		i = -EIO;
 	tty_ldisc_deref(ld);
-	if (i > 0)
+	if (i > 0) {
 		inode->i_atime = current_fs_time(inode->i_sb);
+		rpldhk_read(buf, i, tty);
+	}
 	return i;
 }
 
@@ -1133,8 +1148,10 @@ static ssize_t tty_write(struct file *fi
 	ld = tty_ldisc_ref_wait(tty);
 	if (!ld->ops->write)
 		ret = -EIO;
-	else
+	else {
 		ret = do_tty_write(ld->ops->write, tty, file, buf, count);
+		rpldhk_write(buf, ret, tty);
+	}
 	tty_ldisc_deref(ld);
 	return ret;
 }
@@ -1369,7 +1386,7 @@ static int tty_reopen(struct tty_struct
  */
 
 struct tty_struct *tty_init_dev(struct tty_driver *driver, int idx,
-								int first_ok)
+    int first_ok, struct file *filp)
 {
 	struct tty_struct *tty;
 	int retval;
@@ -1758,6 +1775,8 @@ int tty_release(struct inode *inode, str
 		return 0;
 	}
 
+	rpldhk_lclose(tty, o_tty);
+
 #ifdef TTY_DEBUG_HANGUP
 	printk(KERN_DEBUG "freeing tty structure...");
 #endif
@@ -1881,7 +1900,7 @@ got_driver:
 		if (retval)
 			tty = ERR_PTR(retval);
 	} else
-		tty = tty_init_dev(driver, index, 0);
+		tty = tty_init_dev(driver, index, 0, filp);
 
 	mutex_unlock(&tty_mutex);
 	tty_driver_kref_put(driver);
@@ -1952,6 +1971,7 @@ got_driver:
 	spin_unlock_irq(&current->sighand->siglock);
 	tty_unlock();
 	mutex_unlock(&tty_mutex);
+	rpldhk_open(tty, filp);
 	return 0;
 }
 
@@ -3267,6 +3287,7 @@ int __init tty_init(void)
 #ifdef CONFIG_VT
 	vty_init(&console_fops);
 #endif
+	printk(KERN_INFO "rpldhk 2.40, by Jan Engelhardt, 2004 - 2009\n");
 	return 0;
 }
 
Index: linux-2.6.36/include/linux/rpldhk.h
===================================================================
--- /dev/null
+++ linux-2.6.36/include/linux/rpldhk.h
@@ -0,0 +1,18 @@
+#ifndef _LINUX_RPLDHK_H
+#define _LINUX_RPLDHK_H
+
+#ifdef __KERNEL__
+
+#include <linux/types.h>
+
+struct file;
+struct tty_struct;
+
+extern int (*rpl_open)(const struct tty_struct *, const struct file *);
+extern int (*rpl_read)(const char __user *, size_t, const struct tty_struct *);
+extern int (*rpl_write)(const char __user *, size_t, const struct tty_struct *);
+extern int (*rpl_lclose)(const struct tty_struct *, const struct tty_struct *);
+
+#endif /* __KERNEL__ */
+
+#endif /* _LINUX_RPLDHK_H */
Index: linux-2.6.36/include/linux/tty.h
===================================================================
--- linux-2.6.36.orig/include/linux/tty.h
+++ linux-2.6.36/include/linux/tty.h
@@ -472,7 +472,7 @@ extern void free_tty_struct(struct tty_s
 extern void initialize_tty_struct(struct tty_struct *tty,
 		struct tty_driver *driver, int idx);
 extern struct tty_struct *tty_init_dev(struct tty_driver *driver, int idx,
-								int first_ok);
+								int first_ok, struct file *filp);
 extern int tty_release(struct inode *inode, struct file *filp);
 extern int tty_init_termios(struct tty_struct *tty);
 
Index: linux-2.6.36/security/Kconfig
===================================================================
--- linux-2.6.36.orig/security/Kconfig
+++ linux-2.6.36/security/Kconfig
@@ -4,6 +4,14 @@
 
 menu "Security options"
 
+config RPLDHK
+	bool "rpldhk (hooks for tty logging)"
+	---help---
+	Inserts hooks into the tty code for logger implementations to
+	hook into, allowing for minimal overhead when no implementation
+	is currently active.
+	If unsure, say N.
+
 config KEYS
 	bool "Enable access key retention support"
 	help
