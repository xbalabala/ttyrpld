---
 arch/alpha/alpha/conf.c     |    5 
 arch/amd64/amd64/conf.c     |    5 
 arch/arm/arm/conf.c         |    4 
 arch/hp300/hp300/conf.c     |    5 
 arch/hppa/hppa/conf.c       |    5 
 arch/hppa64/hppa64/conf.c   |    6 
 arch/i386/i386/conf.c       |    7 
 arch/luna88k/luna88k/conf.c |    5 
 arch/mac68k/mac68k/conf.c   |    5 
 arch/macppc/macppc/conf.c   |    5 
 arch/mvme68k/mvme68k/conf.c |    5 
 arch/mvme88k/mvme88k/conf.c |    5 
 arch/mvmeppc/mvmeppc/conf.c |    5 
 arch/sgi/sgi/conf.c         |    5 
 arch/sparc/sparc/conf.c     |    4 
 arch/sparc64/sparc64/conf.c |    4 
 arch/vax/vax/conf.c         |    5 
 conf/files                  |    1 
 kern/rpldev.c               |  363 ++++++++++++++++++++++++++++++++++++++++++++
 kern/tty.c                  |   44 +++++
 sys/conf.h                  |   16 +
 sys/rpl_ioctl.h             |   31 +++
 sys/rpl_packet.h            |   51 ++++++
 sys/rpldev.h                |   19 ++
 sys/rpldhk.h                |   17 ++
 25 files changed, 626 insertions(+), 1 deletion(-)

Index: sys/arch/alpha/alpha/conf.c
===================================================================
--- sys.orig/arch/alpha/alpha/conf.c
+++ sys/arch/alpha/alpha/conf.c
@@ -205,6 +205,11 @@ struct cdevsw	cdevsw[] =
 	cdev_bktr_init(NBKTR,bktr),	/* 58: Bt848 video capture device */
 	cdev_radio_init(NRADIO,radio), /* 59: generic radio I/O */
 	cdev_mouse_init(NWSMUX, wsmux),	/* 60: ws multiplexor */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N /* 61 .. 127 */
+	cdev_rpldev_init(),		/* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof (cdevsw) / sizeof (cdevsw[0]);
 
Index: sys/arch/amd64/amd64/conf.c
===================================================================
--- sys.orig/arch/amd64/amd64/conf.c
+++ sys/arch/amd64/amd64/conf.c
@@ -296,6 +296,11 @@ struct cdevsw	cdevsw[] =
 	cdev_bthub_init(NBTHUB,bthub),	/* 84: bthub */
 	cdev_nvram_init(NNVRAM,nvram),	/* 85: NVRAM interface */
 	cdev_agp_init(NAGP,agp),	/* 86: agp */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N /* 87 .. 127 */
+	cdev_rpldev_init(),		/* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/arm/arm/conf.c
===================================================================
--- sys.orig/arch/arm/arm/conf.c
+++ sys/arch/arm/arm/conf.c
@@ -395,6 +395,10 @@ struct cdevsw cdevsw[] = {
 	cdev_radio_init(NRADIO,radio),		/* 97: generic radio I/O */
 	cdev_ptm_init(NPTY,ptm),		/* 98: pseudo-tty ptm device */
 	cdev_spkr_init(NSPKR,spkr),		/* 99: PC speaker */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N /* 100 .. 127 */
+        cdev_rpldev_init(),                     /* 128: rpldev */
+#undef N
 };
 
 int nblkdev = sizeof(bdevsw) / sizeof(bdevsw[0]);
Index: sys/arch/hp300/hp300/conf.c
===================================================================
--- sys.orig/arch/hp300/hp300/conf.c
+++ sys/arch/hp300/hp300/conf.c
@@ -174,6 +174,11 @@ struct cdevsw	cdevsw[] =
 #endif
 	cdev_ptm_init(NPTY,ptm),	/* 52: pseudo-tty ptm device */
 
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N /* 53 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/hppa/hppa/conf.c
===================================================================
--- sys.orig/arch/hppa/hppa/conf.c
+++ sys/arch/hppa/hppa/conf.c
@@ -187,6 +187,11 @@ struct cdevsw   cdevsw[] =
 	cdev_lkm_dummy(),		/* 51: */
 	cdev_lkm_dummy(),		/* 52: */
 	cdev_lkm_dummy(),		/* 53: */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N /* 54 .. 127 */
+	cdev_rpldev_init(),		/* 128: rpldev */
+#undef N
 };
 int nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/hppa64/hppa64/conf.c
===================================================================
--- sys.orig/arch/hppa64/hppa64/conf.c
+++ sys/arch/hppa64/hppa64/conf.c
@@ -171,6 +171,12 @@ struct cdevsw   cdevsw[] =
 	cdev_lkm_dummy(),
 	cdev_lkm_dummy(),
 	cdev_lkm_dummy(),
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N /* 46 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 int nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/i386/i386/conf.c
===================================================================
--- sys.orig/arch/i386/i386/conf.c
+++ sys/arch/i386/i386/conf.c
@@ -312,7 +312,12 @@ struct cdevsw	cdevsw[] =
 	cdev_notdef(),			/* 85: ACPI (deprecated) */
 	cdev_bthub_init(NBTHUB,bthub),	/* 86: bthub */
 	cdev_agp_init(NAGP,agp),	/* 87: agp */
-	cdev_drm_init(NDRMBASE,drm)	/* 88: drm */
+	cdev_drm_init(NDRMBASE,drm),	/* 88: drm */
+#define N cdev_notdef(),
+/* 89 .. 127 */
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+	cdev_rpldev_init(),		/* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/luna88k/luna88k/conf.c
===================================================================
--- sys.orig/arch/luna88k/luna88k/conf.c
+++ sys/arch/luna88k/luna88k/conf.c
@@ -156,6 +156,11 @@ struct cdevsw	cdevsw[] =
 	cdev_notdef(),			/* 51 */
 #endif
 	cdev_ptm_init(NPTY,ptm),	/* 52: pseudo-tty ptm device */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N /* 53 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/mac68k/mac68k/conf.c
===================================================================
--- sys.orig/arch/mac68k/mac68k/conf.c
+++ sys/arch/mac68k/mac68k/conf.c
@@ -165,6 +165,11 @@ struct cdevsw	cdevsw[] =
 	cdev_notdef(),			/* 51 */
 #endif
 	cdev_ptm_init(NPTY,ptm),	/* 52: pseudo-tty ptm device */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N /* 53 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/macppc/macppc/conf.c
===================================================================
--- sys.orig/arch/macppc/macppc/conf.c
+++ sys/arch/macppc/macppc/conf.c
@@ -238,6 +238,11 @@ struct cdevsw cdevsw[] = {
 	cdev_bio_init(NBIO,bio),	/* 80: ioctl tunnel */
 	cdev_bthub_init(NBTHUB,bthub),	/* 81: bthub */
 	cdev_openprom_init(1,openprom),	/* 82: /dev/openprom */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N /* 83 .. 127 */
+	cdev_rpldev_init(),		/* 128: rpldev */
+#undef N
 };
 int nchrdev = sizeof cdevsw / sizeof cdevsw[0];
 
Index: sys/arch/mvme68k/mvme68k/conf.c
===================================================================
--- sys.orig/arch/mvme68k/mvme68k/conf.c
+++ sys/arch/mvme68k/mvme68k/conf.c
@@ -215,6 +215,11 @@ struct cdevsw	cdevsw[] =
 	cdev_lkm_dummy(),		/* 51 */
 #endif
 	cdev_ptm_init(NPTY,ptm),	/* 52: pseudo-tty ptm device */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N /* 53 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/mvme88k/mvme88k/conf.c
===================================================================
--- sys.orig/arch/mvme88k/mvme88k/conf.c
+++ sys/arch/mvme88k/mvme88k/conf.c
@@ -201,6 +201,11 @@ struct cdevsw	cdevsw[] =
 	cdev_notdef(),			/* 51 */
 #endif
 	cdev_ptm_init(NPTY,ptm),	/* 52: pseudo-tty ptm device */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N /* 53 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/mvmeppc/mvmeppc/conf.c
===================================================================
--- sys.orig/arch/mvmeppc/mvmeppc/conf.c
+++ sys/arch/mvmeppc/mvmeppc/conf.c
@@ -178,6 +178,11 @@ struct cdevsw cdevsw[] = {
 	cdev_bio_init(NBIO,bio),	/* 53: ioctl tunnel */
 	cdev_disk_init(NRAID,raid),	/* 54: RAIDframe disk driver */
 	cdev_ptm_init(NPTY,ptm),	/* 55: pseudo-tty ptm device */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N /* 56 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 int nchrdev = sizeof cdevsw / sizeof cdevsw[0];
 
Index: sys/arch/sgi/sgi/conf.c
===================================================================
--- sys.orig/arch/sgi/sgi/conf.c
+++ sys/arch/sgi/sgi/conf.c
@@ -189,6 +189,11 @@ cdev_wsdisplay_init(NWSDISPLAY, wsdispla
 	cdev_notdef(),			/* 51: */
 #endif
 	cdev_ptm_init(NPTY,ptm),	/* 52: pseudo-tty ptm device */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N /* 53 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 
 int	nchrdev = sizeof (cdevsw) / sizeof (cdevsw[0]);
Index: sys/arch/sparc/sparc/conf.c
===================================================================
--- sys.orig/arch/sparc/sparc/conf.c
+++ sys/arch/sparc/sparc/conf.c
@@ -266,6 +266,10 @@ struct cdevsw	cdevsw[] =
 	cdev_disk_init(NRAID,raid),     /* 123: RAIDframe disk driver */
 	cdev_bio_init(NBIO,bio),	/* 124: ioctl tunnel */
 	cdev_ptm_init(NPTY,ptm),	/* 125: pseudo-tty ptm device */
+#define N cdev_notdef(),
+N N /* 126 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/sparc64/sparc64/conf.c
===================================================================
--- sys.orig/arch/sparc64/sparc64/conf.c
+++ sys/arch/sparc64/sparc64/conf.c
@@ -282,6 +282,10 @@ struct cdevsw	cdevsw[] =
 	cdev_tty_init(NPCONS,pcons),	/* 122: PROM console */
 	cdev_ptm_init(NPTY,ptm),	/* 123: pseudo-tty ptm device */
 	cdev_hotplug_init(NHOTPLUG,hotplug), /* 124: devices hot plugging */
+#define N cdev_notdef(),
+N N N /* 125 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/arch/vax/vax/conf.c
===================================================================
--- sys.orig/arch/vax/vax/conf.c
+++ sys/arch/vax/vax/conf.c
@@ -437,6 +437,11 @@ struct cdevsw	cdevsw[] =
 	cdev_notdef(),			/* 74 */
 #endif
 	cdev_ptm_init(NPTY,ptm),	/* 75: pseudo-tty ptm device */
+#define N cdev_notdef(),
+N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N
+N N N N N N N N N N N N /* 76 .. 127 */
+        cdev_rpldev_init(),             /* 128: rpldev */
+#undef N
 };
 int	nchrdev = sizeof(cdevsw) / sizeof(cdevsw[0]);
 
Index: sys/conf/files
===================================================================
--- sys.orig/conf/files
+++ sys/conf/files
@@ -693,6 +693,7 @@ file kern/tty_nmea.c			nmea			needs-flag
 file kern/tty_msts.c			msts			needs-flag
 file kern/tty_subr.c
 file kern/tty_tty.c
+file kern/rpldev.c
 file kern/uipc_domain.c
 file kern/uipc_mbuf.c
 file kern/uipc_mbuf2.c
Index: sys/kern/rpldev.c
===================================================================
--- /dev/null
+++ sys/kern/rpldev.c
@@ -0,0 +1,362 @@
+/*
+ *	ttyrpld/k_openbsd-4.3/rpldev.c
+ *	Copyright © Jan Engelhardt <jengelh [at] medozas de>, 2004 - 2008
+ *
+ *	Redistribution and use in source and binary forms, with or without
+ *	modification, are permitted provided that the following conditions
+ *	are met:
+ *
+ *	1. Redistributions of source code must retain the above copyright
+ *	   notice, this list of conditions and the following disclaimer.
+ *	2. Redistributions in binary form must reproduce the above copyright
+ *	   notice, this list of conditions and the following disclaimer in the
+ *	   documentation and/or other materials provided with the distribution.
+ *	3. Redistributions of modified code that are made available only
+ *	   in binary form require sending a description to the ttyrpld
+ *	   project maintainer on what has been changed.
+ *	4. Neither the names of the above-listed copyright holders nor the
+ *	   names of any contributors may be used to endorse or promote
+ *	   products derived from this software without specific prior
+ *	   written permission.
+ *
+ *	NO WARRANTY. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ *	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
+ *	BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND
+ *	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ *	COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR
+ *	CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *	BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ *	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ *	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ *	ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+ */
+#include <sys/param.h>
+#include <sys/conf.h>
+#include <sys/endian.h>
+#include <sys/errno.h>
+#include <sys/exec.h>
+#include <sys/ioccom.h>
+#include <sys/malloc.h>
+#include <sys/mutex.h>
+#include <sys/poll.h>
+#include <sys/proc.h>
+#include <sys/syslog.h>
+#include <sys/systm.h>
+#include <sys/time.h>
+#include <sys/tty.h>
+#include <sys/types.h>
+#include <sys/vnode.h>
+
+#include <sys/rpldev.h>
+#include <sys/rpldhk.h>
+#include <sys/rpl_ioctl.h>
+#include <sys/rpl_packet.h>
+
+#define TTY_DEVNR(tty) htole32(mkdev_26(major((tty)->t_dev), \
+                       minor((tty)->t_dev)))
+
+/* Stage 2 functions */
+static int rpldhc_open(const struct tty *);
+static int rpldhc_read(const char *, size_t, const struct tty *);
+static int rpldhc_write(const char *, size_t, const struct tty *);
+static int rpldhc_lclose(const struct tty *);
+
+/* Stage 3 functions */
+
+/* Local functions */
+static inline size_t avail_R(void);
+static inline size_t avail_W(void);
+static inline void fill_time(struct rpltime *);
+static inline unsigned int min_uint(unsigned int, unsigned int);
+static inline uint32_t mkdev_26(unsigned long, unsigned long);
+static inline int circular_get(struct uio *, size_t);
+static inline void circular_put(const void *, size_t);
+static int circular_put_packet(struct rpldev_packet *, const void *, size_t);
+
+/* Variables */
+static struct mutex Buffer_lock, Open_lock;
+static char *Buffer, *BufRP, *BufWP;
+static size_t Bufsize = 32 * 1024;
+static unsigned int Open_count;
+static int kmi_usecount;
+
+//-----------------------------------------------------------------------------
+static int rpldhc_open(const struct tty *tty)
+{
+	struct rpldev_packet p;
+
+	p.dev   = TTY_DEVNR(tty);
+	p.size  = 0;
+	p.event = EVT_OPEN;
+	p.magic = MAGIC_SIG;
+	fill_time(&p.time);
+	return circular_put_packet(&p, NULL, 0);
+}
+
+static int rpldhc_read(const char *buf, size_t count, const struct tty *tty)
+{
+	struct rpldev_packet p;
+
+	if (count == 0)
+		return 0;
+
+	p.dev   = TTY_DEVNR(tty);
+	p.size  = htole16(count);
+	p.event = EVT_READ;
+	p.magic = MAGIC_SIG;
+	fill_time(&p.time);
+	return circular_put_packet(&p, buf, count);
+}
+
+static int rpldhc_write(const char *buf, size_t count, const struct tty *tty)
+{
+	struct rpldev_packet p;
+
+	if (count == 0)
+		return 0;
+
+	p.dev   = TTY_DEVNR(tty);
+	p.size  = htole16(count);
+	p.event = EVT_WRITE;
+	p.magic = MAGIC_SIG;
+	fill_time(&p.time);
+	return circular_put_packet(&p, buf, count);
+}
+
+static int rpldhc_lclose(const struct tty *tty)
+{
+	struct rpldev_packet p;
+
+	p.dev   = TTY_DEVNR(tty);
+	p.size  = 0;
+	p.event = EVT_LCLOSE;
+	p.magic = MAGIC_SIG;
+	fill_time(&p.time);
+	return circular_put_packet(&p, NULL, 0);
+}
+
+//-----------------------------------------------------------------------------
+int rpldev_open(dev_t dev, int flag, int mode, struct proc *th)
+{
+	mtx_enter(&Open_lock);
+	if (Open_count) {
+		mtx_leave(&Open_lock);
+		return EBUSY;
+	}
+	++kmi_usecount;
+	++Open_count;
+	mtx_leave(&Open_lock);
+
+	if ((Buffer = malloc(Bufsize, M_TTYS, M_WAITOK)) == NULL) {
+		--kmi_usecount;
+		--Open_count;
+		return ENOMEM;
+	}
+
+	BufRP = BufWP = Buffer;
+	rpl_open   = rpldhc_open;
+	rpl_read   = rpldhc_read;
+	rpl_write  = rpldhc_write;
+	rpl_lclose = rpldhc_lclose;
+	return 0;
+}
+
+int rpldev_read(dev_t dev, struct uio *uio, int flags)
+{
+	size_t count;
+	int ret;
+
+	mtx_enter(&Buffer_lock);
+	if (Buffer == NULL)
+		goto out;
+
+	while (BufRP == BufWP) {
+		mtx_leave(&Buffer_lock);
+		if (flags & IO_NDELAY)
+			return EWOULDBLOCK;
+		if ((ret = tsleep(&Buffer, PCATCH, "rpldev", 0)) != 0)
+			return ret;
+		ret = 0;
+		mtx_enter(&Buffer_lock);
+		if (Buffer == NULL)
+			goto out;
+	}
+
+	count = min_uint(uio->uio_resid, avail_R());
+	ret   = circular_get(uio, count);
+ out:
+	mtx_leave(&Buffer_lock);
+	return ret;
+}
+
+int rpldev_ioctl(dev_t dev, u_long cmd, caddr_t data, int flags,
+    struct proc *th)
+{
+	size_t *ptr = (void *)data;
+	int ret = 0;
+
+	if (IOCGROUP(cmd) != RPL_IOC_MAGIC)
+		return ENOTTY;
+	if (ptr == NULL)
+		return EFAULT;
+
+	switch (cmd) {
+		case RPL_IOC_GETBUFSIZE:
+			*ptr = Bufsize;
+			return 0;
+		case RPL_IOC_GETRAVAIL:
+			mtx_enter(&Buffer_lock);
+			if (Buffer == NULL)
+				goto out;
+			*ptr = avail_R();
+			mtx_leave(&Buffer_lock);
+			return 0;
+		case RPL_IOC_GETWAVAIL:
+			mtx_enter(&Buffer_lock);
+			if (Buffer == NULL)
+				goto out;
+			*ptr = avail_W();
+			mtx_leave(&Buffer_lock);
+			return 0;
+		case RPL_IOC_IDENTIFY:
+			*ptr = 0xC0FFEE;
+			return 0;
+		case RPL_IOC_SEEK:
+			mtx_enter(&Buffer_lock);
+			BufRP = Buffer + (BufRP - Buffer +
+			        min_uint(*ptr, avail_R())) % Bufsize;
+			mtx_leave(&Buffer_lock);
+			return 0;
+		case RPL_IOC_FLUSH:
+			mtx_enter(&Buffer_lock);
+			BufRP = BufWP;
+			mtx_leave(&Buffer_lock);
+			return 0;
+	}
+
+	ret = ENOTTY;
+ out:
+	return ret;
+}
+
+int rpldev_poll(dev_t dev, int events, struct proc *th)
+{
+	return (BufRP == BufWP) ? 0 : (POLLIN | POLLRDNORM);
+}
+
+int rpldev_close(dev_t dev, int flag, int mode, struct proc *th)
+{
+	rpl_open   = NULL;
+	rpl_read   = NULL;
+	rpl_write  = NULL;
+	rpl_lclose = NULL;
+	mtx_enter(&Buffer_lock);
+	free(Buffer, M_TTYS);
+	Buffer = NULL;
+	mtx_leave(&Buffer_lock);
+	--kmi_usecount;
+	--Open_count;
+	return 0;
+}
+
+//-----------------------------------------------------------------------------
+static inline size_t avail_R(void)
+{
+	if (BufWP >= BufRP)
+		return BufWP - BufRP;
+	return BufWP + Bufsize - BufRP;
+}
+
+static inline size_t avail_W(void)
+{
+	if (BufWP >= BufRP)
+		return BufRP + Bufsize - BufWP - 1;
+	return BufRP - BufWP - 1;
+}
+
+static inline void fill_time(struct rpltime *x)
+{
+	struct timeval tv;
+	microtime(&tv);
+
+	if (sizeof(tv.tv_sec) == sizeof(uint32_t))
+		x->tv_sec = htole32(tv.tv_sec);
+	else if (sizeof(tv.tv_sec) == sizeof(uint64_t))
+		x->tv_sec = htole64(tv.tv_sec);
+
+	if (sizeof(tv.tv_usec) == sizeof(uint32_t))
+		x->tv_usec = htole32(tv.tv_usec);
+	else if (sizeof(tv.tv_usec) == sizeof(uint64_t))
+		x->tv_usec = htole64(tv.tv_usec);
+
+	return;
+}
+
+static inline unsigned int min_uint(unsigned int a, unsigned int b)
+{
+	return (a < b) ? a : b;
+}
+
+static inline uint32_t mkdev_26(unsigned long maj, unsigned long min)
+{
+	return (maj << 20) | (min & 0xFFFFF);
+}
+
+static inline int circular_get(struct uio *uio, size_t count)
+{
+	size_t x = Buffer + Bufsize - BufRP;
+	int ret;
+
+	if (count < x) {
+		if ((ret = uiomove(BufRP, count, uio)) != 0)
+			return ret;
+		BufRP += count;
+	} else {
+		if ((ret = uiomove(BufRP, x, uio)) != 0 ||
+		    (ret = uiomove(Buffer, count - x, uio)) != 0)
+			return ret;
+		BufRP = Buffer + count - x;
+	}
+
+	return ret;
+}
+
+static inline void circular_put(const void *src, size_t count)
+{
+	size_t x = Buffer + Bufsize - BufWP;
+
+	if (count < x) {
+		memcpy(BufWP, src, count);
+		BufWP += count;
+	} else {
+		memcpy(BufWP, src, x);
+		memcpy(Buffer, src + x, count - x);
+		BufWP = Buffer + count - x;
+	}
+
+	return;
+}
+
+static int circular_put_packet(struct rpldev_packet *p, const void *buf,
+    size_t count)
+{
+	if (count > (size_t)(-sizeof(struct rpldev_packet) - 1))
+		return ENOSPC;
+	mtx_enter(&Buffer_lock);
+	if (Buffer == NULL) {
+		mtx_leave(&Buffer_lock);
+		return 0;
+	}
+	if (avail_W() < sizeof(struct rpldev_packet) + count) {
+		mtx_leave(&Buffer_lock);
+		return ENOSPC;
+	}
+
+	circular_put(p, sizeof(struct rpldev_packet));
+	if (count > 0)
+		circular_put(buf, count);
+	mtx_leave(&Buffer_lock);
+	wakeup_n(&Buffer, 1);
+	return count;
+}
Index: sys/kern/tty.c
===================================================================
--- sys.orig/kern/tty.c
+++ sys/kern/tty.c
@@ -65,6 +65,13 @@
 
 #include "pty.h"
 
+#include <sys/rpldhk.h>
+#include <sys/types.h>
+int (*rpl_open)(const struct tty *);
+int (*rpl_read)(const char *, size_t, const struct tty *);
+int (*rpl_write)(const char *, size_t, const struct tty *);
+int (*rpl_lclose)(const struct tty *);
+
 static int ttnread(struct tty *);
 static void ttyblock(struct tty *);
 void ttyunblock(struct tty *);
@@ -168,6 +175,39 @@ int tty_count;
 
 int64_t tk_cancc, tk_nin, tk_nout, tk_rawcc;
 
+static inline void rpldhk_open(const struct tty *tty)
+{
+	typeof(rpl_open) tmp = rpl_open;
+	if (tmp != NULL)
+		tmp(tty);
+	return;
+}
+
+static inline void rpldhk_read1(char c, const struct tty *tty)
+{
+	typeof(rpl_read) tmp = rpl_read;
+	if (tmp != NULL)
+		tmp(&c, 1, tty);
+	return;
+}
+
+static inline void rpldhk_write(const char *buf, size_t size,
+    const struct tty *tty)
+{
+	typeof(rpl_write) tmp = rpl_write;
+	if (tmp != NULL)
+		tmp(buf, size, tty);
+	return;
+}
+
+static inline void rpldhk_lclose(const struct tty *tty)
+{
+	typeof(rpl_lclose) tmp = rpl_lclose;
+	if (tmp != NULL)
+		tmp(tty);
+	return;
+}
+
 /*
  * Initial open of tty, or (re)entry to standard tty line discipline.
  */
@@ -187,6 +227,7 @@ ttyopen(dev_t device, struct tty *tp)
 	}
 	CLR(tp->t_state, TS_WOPEN);
 	splx(s);
+	rpldhk_open(tp);
 	return (0);
 }
 
@@ -205,6 +246,7 @@ ttyclose(struct tty *tp)
 
 	ttyflush(tp, FREAD | FWRITE);
 
+	rpldhk_lclose(tp);
 	tp->t_gen++;
 	tp->t_pgrp = NULL;
 	if (tp->t_session)
@@ -1580,6 +1622,7 @@ read:
  		error = ureadc(c, uio);
 		if (error)
 			break;
+		rpldhk_read1(c, tp);
  		if (uio->uio_resid == 0)
 			break;
 		/*
@@ -1738,6 +1781,7 @@ loop:
 				cc = 0;
 				break;
 			}
+			rpldhk_write(cp, cc, tp);
 		}
 		/*
 		 * If nothing fancy need be done, grab those characters we
Index: sys/sys/conf.h
===================================================================
--- sys.orig/sys/conf.h
+++ sys/sys/conf.h
@@ -284,6 +284,22 @@ extern struct cdevsw cdevsw[];
 	dev_init(c,n,write), dev_init(c,n,ioctl), (dev_type_stop((*))) enodev, \
 	0, (dev_type_poll((*))) enodev, (dev_type_mmap((*))) enodev }
 
+#include <sys/rpldev.h>
+#define cdev_rpldev_init() {  \
+	.d_open     = rpldev_open,    \
+	.d_close    = rpldev_close,   \
+	.d_read     = rpldev_read,    \
+	.d_write    = (void *)enodev, \
+	.d_ioctl    = rpldev_ioctl,   \
+	.d_stop     = (void *)enodev, \
+	.d_tty      = NULL,           \
+	.d_poll     = rpldev_poll,    \
+	.d_mmap     = (void *)enodev, \
+	.d_type     = 0,              \
+	.d_flags    = 0,              \
+	.d_kqfilter = NULL,           \
+}
+
 /* open, close, read, ioctl, poll, kqfilter XXX should be a generic device */
 #define cdev_log_init(c,n) { \
 	dev_init(c,n,open), dev_init(c,n,close), dev_init(c,n,read), \
Index: sys/sys/rpl_ioctl.h
===================================================================
--- /dev/null
+++ sys/sys/rpl_ioctl.h
@@ -0,0 +1,31 @@
+#ifndef TTYRPLD_IOCTL_H
+#define TTYRPLD_IOCTL_H 1
+
+#if defined(__linux__) && defined(__KERNEL__)
+#	include <linux/ioctl.h>
+#	include <linux/types.h>
+#elif defined(__FreeBSD__) && defined(_KERNEL)
+#	include <sys/ioccom.h>
+#elif defined(__sun__) /* SunOS kernel-/userspace */
+#	include <sys/ioccom.h>
+#else /* userspace */
+#	include <sys/types.h>
+#	include <sys/ioctl.h>
+#endif
+
+enum {
+	/*
+	 * Some weird *BSD scheme makes me use IOWR, otherwise readin the
+	 * pointer within kernel space does not seem to work.
+	 */
+	RPL_IOC_MAGIC      = 0xB7,
+	RPL_IOC_GETBUFSIZE = _IOWR(RPL_IOC_MAGIC, 1, size_t),
+	RPL_IOC_GETRAVAIL  = _IOWR(RPL_IOC_MAGIC, 2, size_t),
+	RPL_IOC_GETWAVAIL  = _IOWR(RPL_IOC_MAGIC, 3, size_t),
+	RPL_IOC_IDENTIFY   = _IOWR(RPL_IOC_MAGIC, 4, size_t),
+	RPL_IOC_SEEK       = _IOWR(RPL_IOC_MAGIC, 5, size_t),
+	RPL_IOC_FLUSH      = _IOWR(RPL_IOC_MAGIC, 6, size_t),
+	RPL_IOC__MAXNUM    = _IOWR(RPL_IOC_MAGIC, 7, size_t),
+};
+
+#endif /* TTYRPLD_IOCTL_H */
Index: sys/sys/rpl_packet.h
===================================================================
--- /dev/null
+++ sys/sys/rpl_packet.h
@@ -0,0 +1,51 @@
+#ifndef TTYRPLD_PACKET_H
+#define TTYRPLD_PACKET_H 1
+
+#define __PACKED __attribute__((packed))
+
+#if defined(__linux__) && defined(__KERNEL__)
+#	include <linux/time.h>
+#	include <linux/types.h>
+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__sun)) && \
+    defined(_KERNEL)
+#	include <sys/time.h>
+#	include <sys/types.h>
+#else /* userspace */
+#	include <sys/time.h>
+#	include "rpl_stdint.h"
+#endif
+
+enum {
+	EVT_NONE       = 0x00,
+	EVT_OPEN       = 0x01,
+	EVT_READ       = 0x02,
+	EVT_WRITE      = 0x03,
+	EVT_MAGIC      = 0x4A,
+	EVT_LCLOSE     = 0x64,
+	EVT_ID_PROG    = 0xF0,
+	EVT_ID_DEVPATH = 0xF1,
+	EVT_ID_TIME    = 0xF2,
+	EVT_ID_USER    = 0xF3,
+	EVT_max,
+	MAGIC_SIG      = 0xEE,
+};
+
+struct rpltime {
+	uint64_t tv_sec;
+	uint32_t tv_usec;
+};
+
+struct rpldev_packet {
+	uint32_t dev;
+	uint16_t size;
+	uint8_t event, magic;
+	struct rpltime time;
+} __PACKED;
+
+struct rpldsk_packet {
+	uint16_t size;
+	uint8_t event, magic;
+	struct rpltime time;
+} __PACKED;
+
+#endif /* TTYRPLD_PACKET_H */
Index: sys/sys/rpldev.h
===================================================================
--- /dev/null
+++ sys/sys/rpldev.h
@@ -0,0 +1,19 @@
+#ifndef _SYS_RPLDEV_H
+#define _SYS_RPLDEV_H
+
+#ifdef _KERNEL
+
+#include <sys/types.h>
+
+struct proc;
+struct uio;
+
+extern int rpldev_open(dev_t, int, int, struct proc *);
+extern int rpldev_read(dev_t, struct uio *, int);
+extern int rpldev_ioctl(dev_t, u_long, caddr_t, int, struct proc *);
+extern int rpldev_poll(dev_t, int, struct proc *);
+extern int rpldev_close(dev_t, int, int, struct proc *);
+
+#endif /* _KERNEL */
+
+#endif /* _SYS_RPLDEV_H */
Index: sys/sys/rpldhk.h
===================================================================
--- /dev/null
+++ sys/sys/rpldhk.h
@@ -0,0 +1,17 @@
+#ifndef _SYS_RPLDHK_H
+#define _SYS_RPLDHK_H 1
+
+#ifdef _KERNEL
+
+#include <sys/types.h>
+
+struct tty;
+
+extern int (*rpl_open)(const struct tty *);
+extern int (*rpl_read)(const char *, size_t, const struct tty *);
+extern int (*rpl_write)(const char *, size_t, const struct tty *);
+extern int (*rpl_lclose)(const struct tty *);
+
+#endif /* _KERNEL */
+
+#endif /* _SYS_RPLDHK_H */
