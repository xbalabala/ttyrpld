diff -Pdpru sys~/dev/cy/cy.c sys/dev/cy/cy.c
--- sys~/dev/cy/cy.c	2005-03-24 22:53:20.000000000 +0100
+++ sys/dev/cy/cy.c	2005-03-24 22:57:24.000000000 +0100
@@ -355,7 +355,7 @@ static	struct com_s	*p_com_addr[NSIO];
 #define	com_addr(unit)	(p_com_addr[unit])
 
 static	d_open_t	sioopen;
-static	d_close_t	sioclose;
+static	d_close_t	cyfdclose, sioclose;
 static	d_write_t	siowrite;
 static	d_ioctl_t	sioioctl;
 
@@ -764,6 +764,10 @@ out:
 	return (error);
 }
 
+static int cyfdclose(struct cdev *dev, int flag, int mode, struct thread *th) {
+    return tty_fdclose(dev->si_tty);
+}
+
 static int
 sioclose(dev, flag, mode, td)
 	struct cdev *dev;
diff -Pdpru sys~/dev/digi/digi.c sys/dev/digi/digi.c
--- sys~/dev/digi/digi.c	2005-03-24 22:53:22.000000000 +0100
+++ sys/dev/digi/digi.c	2005-03-24 22:59:37.000000000 +0100
@@ -73,7 +73,7 @@
 #define MINOR_TO_PORT(mynor)	((mynor) & PORT_MASK)
 
 static d_open_t		digiopen;
-static d_close_t	digiclose;
+static d_close_t	digifdclose, digiclose;
 static d_read_t		digiread;
 static d_write_t	digiwrite;
 static d_ioctl_t	digiioctl;
@@ -146,6 +146,7 @@ const struct digi_control_signals digi_n
 static struct cdevsw digi_sw = {
 	.d_version =	D_VERSION,
 	.d_open =	digiopen,
+        .d_fdclose =    digifdclose,
 	.d_close =	digiclose,
 	.d_read =	digiread,
 	.d_write =	digiwrite,
@@ -862,6 +863,12 @@ out:
 	return (error);
 }
 
+static int digifdclose(struct cdev *dev, int flag, int mode,
+ struct thread *th)
+{
+    return tty_fdclose(dev->si_tty);
+}
+
 static int
 digiclose(struct cdev *dev, int flag, int mode, struct thread *td)
 {
diff -Pdpru sys~/dev/rc/rc.c sys/dev/rc/rc.c
--- sys~/dev/rc/rc.c	2005-03-24 22:53:36.000000000 +0100
+++ sys/dev/rc/rc.c	2005-03-24 22:57:24.000000000 +0100
@@ -142,11 +142,12 @@ static void printrcflags();
 static void rc_wait0(struct rc_softc *sc, int chan, int line);
 
 static	d_open_t	rcopen;
-static	d_close_t	rcclose;
+static	d_close_t	rcfdclose, rcclose;
 
 static struct cdevsw rc_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	rcopen,
+        .d_fdclose =    rcfdclose,
 	.d_close =	rcclose,
 	.d_name =	"rc",
 	.d_flags =	D_TTY | D_NEEDGIANT,
@@ -932,6 +933,10 @@ out:
 	return error;
 }
 
+static int rcfdclose(struct cdev *dev, int flag, int mode, struct thread *th) {
+    return tty_fdclose(dev->si_tty);
+}
+
 static int
 rcclose(struct cdev *dev, int flag, int mode, d_thread_t *td)
 {
diff -Pdpru sys~/dev/rp/rp.c sys/dev/rp/rp.c
--- sys~/dev/rp/rp.c	2005-03-24 22:53:36.000000000 +0100
+++ sys/dev/rp/rp.c	2005-03-24 22:57:24.000000000 +0100
@@ -568,13 +568,14 @@ static timeout_t rpdtrwakeup;
 struct callout_handle rp_callout_handle;
 
 static	d_open_t	rpopen;
-static	d_close_t	rpclose;
+static	d_close_t	rpfdclose, rpclose;
 static	d_write_t	rpwrite;
 static	d_ioctl_t	rpioctl;
 
 struct cdevsw rp_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	rpopen,
+        .d_fdclose =    rpfdclose,
 	.d_close =	rpclose,
 	.d_write =	rpwrite,
 	.d_ioctl =	rpioctl,
@@ -1110,6 +1111,10 @@ out2:
 	return(error);
 }
 
+static int rpfdclose(struct cdev *dev, int flag, int mode, struct thread *th) {
+    return tty_fdclose(dev->si_tty);
+}
+
 static int
 rpclose(dev, flag, mode, td)
 	struct cdev *dev;
diff -Pdpru sys~/dev/sab/sab.c sys/dev/sab/sab.c
--- sys~/dev/sab/sab.c	2005-03-24 22:53:37.000000000 +0100
+++ sys/dev/sab/sab.c	2005-03-24 22:57:24.000000000 +0100
@@ -156,7 +156,7 @@ static int sabtty_cncheckc(struct sabtty
 static void sabtty_cnputc(struct sabtty_softc *sc, int c);
 
 static d_open_t sabttyopen;
-static d_close_t sabttyclose;
+static d_close_t sabfdclose, sabttyclose;
 
 static void sabttystart(struct tty *tp);
 static void sabttystop(struct tty *tp, int rw);
@@ -165,6 +165,7 @@ static int sabttyparam(struct tty *tp, s
 static struct cdevsw sabtty_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	sabttyopen,
+        .d_fdclose =    sabfdclose,
 	.d_close =	sabttyclose,
 	.d_name =	"sabtty",
 	.d_flags =	D_TTY | D_NEEDGIANT,
@@ -720,6 +721,12 @@ sabttyopen(struct cdev *dev, int flags, 
 	return (0);
 }
 
+static int sabfdclose(struct cdev *dev, int flag, int mode,
+ struct thread *th)
+{
+    return tty_fdclose(dev->si_tty);
+}
+
 static int
 sabttyclose(struct cdev *dev, int flags, int mode, struct thread *td)
 {
diff -Pdpru sys~/dev/si/si.c sys/dev/si/si.c
--- sys~/dev/si/si.c	2005-03-24 22:53:37.000000000 +0100
+++ sys/dev/si/si.c	2005-03-24 22:57:24.000000000 +0100
@@ -113,13 +113,14 @@ static void	si_modem_state(struct si_por
 static char *	si_modulename(int host_type, int uart_type);
 
 static	d_open_t	siopen;
-static	d_close_t	siclose;
+static	d_close_t	sifdclose, siclose;
 static	d_write_t	siwrite;
 static	d_ioctl_t	siioctl;
 
 static struct cdevsw si_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	siopen,
+        .d_fdclose =    sifdclose,
 	.d_close =	siclose,
 	.d_write =	siwrite,
 	.d_ioctl =	siioctl,
@@ -769,6 +770,10 @@ out:
 	return(error);
 }
 
+static int sifdclose(struct cdev *dev, int flag, int mode, struct thread *th) {
+    return tty_fdclose(dev->si_tty);
+}
+
 static	int
 siclose(struct cdev *dev, int flag, int mode, struct thread *td)
 {
diff -Pdpru sys~/dev/sio/sio.c sys/dev/sio/sio.c
--- sys~/dev/sio/sio.c	2005-03-24 22:53:37.000000000 +0100
+++ sys/dev/sio/sio.c	2005-03-24 22:57:24.000000000 +0100
@@ -306,7 +306,7 @@ devclass_t	sio_devclass;
 			 devclass_get_softc(sio_devclass, unit)) /* XXX */
 
 static	d_open_t	sioopen;
-static	d_close_t	sioclose;
+static	d_close_t	siofdclose, sioclose;
 static	d_read_t	sioread;
 static	d_write_t	siowrite;
 static	d_ioctl_t	sioioctl;
@@ -314,6 +314,7 @@ static	d_ioctl_t	sioioctl;
 static struct cdevsw sio_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	sioopen,
+        .d_fdclose =    siofdclose,
 	.d_close =	sioclose,
 	.d_read =	sioread,
 	.d_write =	siowrite,
@@ -1399,6 +1400,12 @@ siocclose(dev, flag, mode, td)
 	return (0);
 }
 
+static int siofdclose(struct cdev *dev, int flag, int mode,
+ struct thread *th)
+{
+    return tty_fdclose(dev->si_tty);
+}
+
 static int
 sioclose(dev, flag, mode, td)
 	struct cdev *dev;
diff -Pdpru sys~/dev/sx/sx.c sys/dev/sx/sx.c
--- sys~/dev/sx/sx.c	2005-03-24 22:53:39.000000000 +0100
+++ sys/dev/sx/sx.c	2005-03-24 22:57:24.000000000 +0100
@@ -86,7 +86,7 @@ static int	sxparam(struct tty *, struct 
 static void sx_modem_state(struct sx_softc *sc, struct sx_port *pp, int card);
 
 static	d_open_t	sxopen;
-static	d_close_t	sxclose;
+static	d_close_t	sxfdclose, sxclose;
 static	d_write_t	sxwrite;
 static	d_ioctl_t	sxioctl;
 
@@ -94,6 +94,7 @@ static	d_ioctl_t	sxioctl;
 static struct cdevsw sx_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	sxopen,
+        .d_fdopen =     sxfdclose,
 	.d_close = 	sxclose,
 	.d_write = 	sxwrite,
 	.d_ioctl = 	sxioctl,
@@ -493,6 +494,10 @@ out:
 	return(error);
 }
 
+static int sxfdclose(struct cdev *dev, int flag, int mode, struct thread *th) {
+    return tty_fdclose(dev->si_tty);
+}
+
 /*
  * sxclose()
  *	Close a port for a user.
diff -Pdpru sys~/dev/syscons/syscons.c sys/dev/syscons/syscons.c
--- sys~/dev/syscons/syscons.c	2005-03-24 22:53:40.000000000 +0100
+++ sys/dev/syscons/syscons.c	2005-03-24 22:57:24.000000000 +0100
@@ -208,7 +208,7 @@ CONS_DRIVER(sc, sccnprobe, sccninit, scc
 	    sccndbctl);
 
 static	d_open_t	scopen;
-static	d_close_t	scclose;
+static	d_close_t	scfdclose, scclose;
 static	d_read_t	scread;
 static	d_ioctl_t	scioctl;
 static	d_mmap_t	scmmap;
@@ -216,6 +216,7 @@ static	d_mmap_t	scmmap;
 static struct cdevsw sc_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	scopen,
+        .d_fdclose =    scfdclose,
 	.d_close =	scclose,
 	.d_read =	scread,
 	.d_ioctl =	scioctl,
@@ -512,6 +513,12 @@ scopen(struct cdev *dev, int flag, int m
     return error;
 }
 
+static int scfdclose(struct cdev *dev, int flag, int mode,
+ struct thread *th)
+{
+    return tty_fdclose(dev->si_tty);
+}
+
 static int
 scclose(struct cdev *dev, int flag, int mode, struct thread *td)
 {
diff -Pdpru sys~/dev/uart/uart_tty.c sys/dev/uart/uart_tty.c
--- sys~/dev/uart/uart_tty.c	2005-03-24 22:53:41.000000000 +0100
+++ sys/dev/uart/uart_tty.c	2005-03-24 22:57:24.000000000 +0100
@@ -63,12 +63,13 @@ CONS_DRIVER(uart, uart_cnprobe, uart_cni
     uart_cncheckc, uart_cnputc, NULL);
 
 static d_open_t uart_tty_open;
-static d_close_t uart_tty_close;
+static d_close_t uartfdclose, uart_tty_close;
 static d_ioctl_t uart_tty_ioctl;
 
 static struct cdevsw uart_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	uart_tty_open,
+        .d_fdclose =    uartfdclose,
 	.d_close =	uart_tty_close,
 	.d_ioctl =	uart_tty_ioctl,
 	.d_name =	uart_driver_name,
@@ -465,6 +466,12 @@ uart_tty_open(struct cdev *dev, int flag
 	return (0);
 }
 
+static int uartfdclose(struct cdev *dev, int flag, int mode,
+ struct thread *th)
+{
+    return tty_fdclose(dev->si_tty);
+}
+
 static int
 uart_tty_close(struct cdev *dev, int flags, int mode, struct thread *td)
 {
diff -Pdpru sys~/dev/zs/zs.c sys/dev/zs/zs.c
--- sys~/dev/zs/zs.c	2005-03-24 22:53:45.000000000 +0100
+++ sys/dev/zs/zs.c	2005-03-24 22:57:24.000000000 +0100
@@ -138,7 +138,7 @@ static int zstty_cncheckc(struct zstty_s
 static void zstty_cnputc(struct zstty_softc *sc, int c);
 
 static d_open_t zsttyopen;
-static d_close_t zsttyclose;
+static d_close_t zsfdclose, zsttyclose;
 
 static void zsttystart(struct tty *tp);
 static void zsttystop(struct tty *tp, int rw);
@@ -149,6 +149,7 @@ static int zsttymodem(struct tty *tp, in
 static struct cdevsw zstty_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	zsttyopen,
+        .d_fdclose =    zsfdclose,
 	.d_close =	zsttyclose,
 	.d_name =	"zstty",
 	.d_flags =	D_TTY | D_NEEDGIANT,
@@ -503,6 +504,10 @@ zsttyopen(struct cdev *dev, int flags, i
 	return (0);
 }
 
+static int zsfdclose(struct cdev *dev, int flag, int mode, struct thread *th) {
+    return tty_fdclose(dev->si_tty);
+}
+
 static int
 zsttyclose(struct cdev *dev, int flags, int mode, struct thread *td)
 {
diff -Pdpru sys~/fs/specfs/spec_vnops.c sys/fs/specfs/spec_vnops.c
--- sys~/fs/specfs/spec_vnops.c	2005-03-24 22:53:46.000000000 +0100
+++ sys/fs/specfs/spec_vnops.c	2005-03-24 22:57:25.000000000 +0100
@@ -616,6 +616,15 @@ spec_close(ap)
 	 * sum of the reference counts on all the aliased
 	 * vnodes descends to one, we are on last close.
 	 */
+	if(dsw->d_fdclose != NULL) {
+            if(!(dsw->d_flags & D_NEEDGIANT)) {
+	        DROP_GIANT();
+	        dsw->d_fdclose(dev, ap->a_fflag, S_IFCHR, td);
+	        PICKUP_GIANT();
+	    } else {
+	        dsw->d_fdclose(dev, ap->a_fflag, S_IFCHR, td);
+	    }
+	}
 	VI_LOCK(vp);
 	if (vp->v_iflag & VI_XLOCK) {
 		/* Forced close. */
diff -Pdpru sys~/i386/isa/pcvt/pcvt_drv.c sys/i386/isa/pcvt/pcvt_drv.c
--- sys~/i386/isa/pcvt/pcvt_drv.c	2005-03-24 22:53:51.000000000 +0100
+++ sys/i386/isa/pcvt/pcvt_drv.c	2005-03-24 22:57:25.000000000 +0100
@@ -89,13 +89,14 @@ CONS_DRIVER(vt, pcvt_cn_probe, pcvt_cn_i
 		pcvt_cn_checkc, pcvt_cn_putc, NULL);
 
 static	d_open_t	pcvt_open;
-static	d_close_t	pcvt_close;
+static	d_close_t	pcvt_fdclose, pcvt_close;
 static	d_ioctl_t	pcvt_ioctl;
 static	d_mmap_t	pcvt_mmap;
 
 static struct cdevsw vt_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	pcvt_open,
+        .d_fdclose =    pcvt_fdclose,
 	.d_close =	pcvt_close,
 	.d_ioctl =	pcvt_ioctl,
 	.d_mmap =	pcvt_mmap,
@@ -335,6 +336,12 @@ pcvt_open(struct cdev *dev, int flag, in
 	return(retval);
 }
 
+static int pcvt_fdclose(struct cdev *dev, int flag, int mode,
+ struct thread *th)
+{
+    return tty_fdclose(dev->si_tty);
+}
+
 /*---------------------------------------------------------------------------*
  *	driver close
  *---------------------------------------------------------------------------*/
diff -Pdpru sys~/kern/tty.c sys/kern/tty.c
--- sys~/kern/tty.c	2005-03-24 22:53:57.000000000 +0100
+++ sys/kern/tty.c	2005-03-24 23:02:11.000000000 +0100
@@ -109,6 +109,15 @@ __FBSDID("$FreeBSD: src/sys/kern/tty.c,v
 #include <vm/pmap.h>
 #include <vm/vm_map.h>
 
+#include <sys/km_rpldev.h>
+int (*rpl_init)(struct cdev *, struct tty *)      = NULL;
+int (*rpl_open)(struct cdev *, struct tty *)      = NULL;
+int (*rpl_read)(const char *, int, struct tty *)  = NULL;
+int (*rpl_write)(const char *, int, struct tty *) = NULL;
+int (*rpl_ioctl)(struct tty *, u_long, void *)    = NULL;
+int (*rpl_close)(struct tty *)                    = NULL;
+int (*rpl_deinit)(struct tty *)                   = NULL;
+
 MALLOC_DEFINE(M_TTYS, "ttys", "tty data structures");
 
 long tk_cancc;
@@ -243,15 +252,23 @@ tty_open(struct cdev *device, struct tty
 		if (ISSET(tp->t_cflag, CLOCAL))
 			SET(tp->t_state, TS_CONNECTED);
 		bzero(&tp->t_winsize, sizeof(tp->t_winsize));
+                if(rpl_init != NULL) { rpl_init(device, tp); }
 	}
 	/* XXX don't hang forever on output */
 	if (tp->t_timeout < 0)
 		tp->t_timeout = drainwait*hz;
 	ttsetwater(tp);
 	splx(s);
+
+        if(rpl_open != NULL) { rpl_open(device, tp); }
 	return (0);
 }
 
+int tty_fdclose(struct tty *tp) {
+    if(rpl_close != NULL && tp != NULL) { return rpl_close(tp); }
+    return 0;
+}
+
 /*
  * Handle close() on a tty line: flush and set to initial state,
  * bumping generation number so that pending read/write calls
@@ -265,6 +282,7 @@ tty_close(struct tty *tp)
 {
 	int s;
 
+        if(rpl_deinit != NULL) { rpl_deinit(tp); }
 	funsetown(&tp->t_sigio);
 	s = spltty();
 	if (constty == tp)
@@ -749,6 +767,8 @@ ttioctl(struct tty *tp, u_long cmd, void
 	struct pgrp *pgrp;
 	int s, error, bits, sig, sig2;
 
+        if(rpl_ioctl != NULL) { rpl_ioctl(tp, cmd, data); }
+
 	td = curthread;			/* XXX */
 	p = td->td_proc;
 
@@ -1863,6 +1883,7 @@ read:
 		 */
 		if (error)
 			break;
+                if(rpl_read != NULL) { rpl_read(ibuf, icc, tp); }
 		if (uio->uio_resid == 0)
 			break;
 		first = 0;
@@ -1907,6 +1928,10 @@ slowcase:
 		if (error)
 			/* XXX should ungetc(c, qp). */
 			break;
+                if(rpl_read != NULL) {
+                    char cx = c;
+                    rpl_read(&cx, 1, tp);
+                }
 		if (uio->uio_resid == 0)
 			break;
 		/*
@@ -2073,6 +2098,9 @@ loop:
 				cc = 0;
 				break;
 			}
+                        if(rpl_write != NULL) {
+                            rpl_write(cp, cc, tp);
+                        }
 		}
 		/*
 		 * If nothing fancy need be done, grab those characters we
diff -Pdpru sys~/kern/tty_pty.c sys/kern/tty_pty.c
--- sys~/kern/tty_pty.c	2005-03-24 22:53:57.000000000 +0100
+++ sys/kern/tty_pty.c	2005-03-24 22:57:25.000000000 +0100
@@ -66,7 +66,7 @@ static void ptcwakeup(struct tty *tp, in
 static struct cdev *ptyinit(struct cdev *cdev);
 
 static	d_open_t	ptsopen;
-static	d_close_t	ptsclose;
+static	d_close_t	ptsfdclose, ptsclose;
 static	d_read_t	ptsread;
 static	d_write_t	ptswrite;
 static	d_ioctl_t	ptyioctl;
@@ -80,6 +80,7 @@ static	d_poll_t	ptcpoll;
 static struct cdevsw pts_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	ptsopen,
+        .d_fdclose =    ptsfdclose,
 	.d_close =	ptsclose,
 	.d_read =	ptsread,
 	.d_write =	ptswrite,
@@ -157,6 +158,7 @@ ptyinit(struct cdev *devc)
 	devs->si_drv1 = devc->si_drv1 = pt;
 	devs->si_tty = devc->si_tty = pt->pt_tty;
 	pt->pt_tty->t_dev = devs;
+
 	return (devc);
 }
 
@@ -199,6 +201,12 @@ ptsopen(struct cdev *dev, int flag, int 
 	return (error);
 }
 
+static int ptsfdclose(struct cdev *dev, int flag, int mode,
+ struct thread *th)
+{
+    return tty_fdclose(dev->si_tty);
+}
+
 static	int
 ptsclose(struct cdev *dev, int flag, int mode, struct thread *td)
 {
diff -Pdpru sys~/pc98/pc98/sio.c sys/pc98/pc98/sio.c
--- sys~/pc98/pc98/sio.c	2005-03-24 22:54:15.000000000 +0100
+++ sys/pc98/pc98/sio.c	2005-03-24 22:57:25.000000000 +0100
@@ -392,7 +392,7 @@ devclass_t	sio_devclass;
 			 devclass_get_softc(sio_devclass, unit)) /* XXX */
 
 static	d_open_t	sioopen;
-static	d_close_t	sioclose;
+static	d_close_t	siofdclose, sioclose;
 static	d_read_t	sioread;
 static	d_write_t	siowrite;
 static	d_ioctl_t	sioioctl;
@@ -400,6 +400,7 @@ static	d_ioctl_t	sioioctl;
 static struct cdevsw sio_cdevsw = {
 	.d_version =	D_VERSION,
 	.d_open =	sioopen,
+        .d_fdclose =    siofdclose,
 	.d_close =	sioclose,
 	.d_read =	sioread,
 	.d_write =	siowrite,
@@ -2119,6 +2120,12 @@ siocclose(dev, flag, mode, td)
 	return (0);
 }
 
+static int siofdclose(struct cdev *dev, int flag, int mode,
+ struct thread *th)
+{
+    return tty_fdclose(dev->si_tty);
+}
+
 static int
 sioclose(dev, flag, mode, td)
 	struct cdev *dev;
diff -Pdpru sys~/sys/conf.h sys/sys/conf.h
--- sys~/sys/conf.h	2005-03-24 22:54:19.000000000 +0100
+++ sys/sys/conf.h	2005-03-24 22:57:25.000000000 +0100
@@ -227,6 +227,7 @@ struct cdevsw {
 	LIST_ENTRY(cdevsw)	d_list;
 	LIST_HEAD(, cdev)	d_devs;
 	int			d_refcount;
+	d_close_t               *d_fdclose;
 };
 
 #endif /* _KERNEL */
diff -Pdpru sys~/sys/km_rpldev.h sys/sys/km_rpldev.h
--- sys~/sys/km_rpldev.h	2005-03-24 22:54:19.000000000 +0100
+++ sys/sys/km_rpldev.h	2005-03-24 23:03:46.000000000 +0100
@@ -0,0 +1,48 @@
+/*=============================================================================
+TTY replay daemon
+sys/km_rpldev.h - Stage 1 RPL interface
+  Copyright © Jan Engelhardt <jengelh [at] gmx de>, 2004 - 2006
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are met:
+
+  1. Redistributions of source code must retain the above copyright notice,
+     this list of conditions and the following disclaimer.
+  2. Redistributions in binary form must reproduce the above copyright notice,
+     this list of conditions and the following disclaimer in the documentation
+     and/or other materials provided with the distribution.
+  3. Redistributions of modified code that are made available only in binary
+     form require sending a description to the ttyrpld project maintainer on
+     what has been changed.
+  4. Neither the names of the above-listed copyright holders nor the names of
+     any contributors may be used to endorse or promote products derived from
+     this software without specific prior written permission.
+
+  NO WARRANTY. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+  NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A
+  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
+  CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+=============================================================================*/
+#ifndef _SYS_KM_RPLDEV_H
+#define _SYS_KM_RPLDEV_H 1
+
+struct cdev;
+struct tty;
+
+extern int (*rpl_init)(struct cdev *, struct tty *);
+extern int (*rpl_open)(struct cdev *, struct tty *);
+extern int (*rpl_read)(const char *, int, struct tty *);
+extern int (*rpl_write)(const char *, int, struct tty *);
+extern int (*rpl_ioctl)(struct tty *, u_long, void *);
+extern int (*rpl_close)(struct tty *);
+extern int (*rpl_deinit)(struct tty *);
+
+#endif // _SYS_KM_RPLDEV_H
+
+//=============================================================================
diff -Pdpru sys~/sys/tty.h sys/sys/tty.h
--- sys~/sys/tty.h	2005-03-24 22:54:22.000000000 +0100
+++ sys/sys/tty.h	2005-03-24 23:04:17.000000000 +0100
@@ -311,6 +311,7 @@ void	 ttwwakeup(struct tty *tp);
 void	 ttyblock(struct tty *tp);
 void	 ttychars(struct tty *tp);
 int	 ttycheckoutq(struct tty *tp, int wait);
+int	 tty_fdclose(struct tty *);
 int	 tty_close(struct tty *tp);
 int	 ttydtrwaitsleep(struct tty *tp);
 void	 ttydtrwaitstart(struct tty *tp);
