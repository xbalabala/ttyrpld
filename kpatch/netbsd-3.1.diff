diff --fast -Ndpru sys~/arch/alpha/a12/a12dc.c sys/arch/alpha/a12/a12dc.c
--- sys~/arch/alpha/a12/a12dc.c	2004-08-30 17:05:15.000000000 +0200
+++ sys/arch/alpha/a12/a12dc.c	2006-02-25 18:56:24.000000000 +0100
@@ -107,6 +107,7 @@ CFATTACH_DECL(a12dc, sizeof(struct a12dc
 extern	struct cfdriver a12dc_cd;
 
 dev_type_open(a12dcopen);
+dev_type_fdclose(a12dcfdclose);
 dev_type_close(a12dcclose);
 dev_type_read(a12dcread);
 dev_type_write(a12dcwrite);
@@ -117,7 +118,7 @@ dev_type_poll(a12dcpoll);
 
 const struct cdevsw a12dc_cdevsw = {
 	a12dcopen, a12dcclose, a12dcread, a12dcwrite, a12dcioctl,
-	a12dcstop, a12dctty, a12dcpoll, nommap, ttykqfilter, D_TTY
+	a12dcstop, a12dctty, a12dcpoll, nommap, ttykqfilter, D_TTY, a12dcfdclose,
 };
 
 int	a12dcfound;		/* There Can Be Only One. */
@@ -316,6 +317,10 @@ a12dcopen(dev, flag, mode, p)
 	return (*tp->t_linesw->l_open)(dev, tp);
 }
  
+int a12dcfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(a12dc_tty[minor(dev)]);
+}
+
 int
 a12dcclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/alpha/alpha/promcons.c sys/arch/alpha/alpha/promcons.c
--- sys~/arch/alpha/alpha/promcons.c	2003-06-30 00:28:03.000000000 +0200
+++ sys/arch/alpha/alpha/promcons.c	2006-02-25 18:58:02.000000000 +0100
@@ -54,6 +54,7 @@ __KERNEL_RCSID(0, "$NetBSD: promcons.c,v
 #ifdef _PMAP_MAY_USE_PROM_CONSOLE
 
 dev_type_open(promopen);
+dev_type_fdclose(promfdclose);
 dev_type_close(promclose);
 dev_type_read(promread);
 dev_type_write(promwrite);
@@ -64,7 +65,7 @@ dev_type_poll(prompoll);
 
 const struct cdevsw prom_cdevsw = {
 	promopen, promclose, promread, promwrite, promioctl,
-	promstop, promtty, prompoll, nommap, ttykqfilter, D_TTY
+	promstop, promtty, prompoll, nommap, ttykqfilter, D_TTY, promfdclose,
 };
 
 #define	PROM_POLL_HZ	50
@@ -128,6 +129,10 @@ promopen(dev_t dev, int flag, int mode, 
 	return error;
 }
  
+int promfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(prom_tty[minor(dev)]);
+}
+
 int
 promclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/amiga/dev/ite.c sys/arch/amiga/dev/ite.c
--- sys~/arch/amiga/dev/ite.c	2005-03-02 09:14:26.000000000 +0100
+++ sys/arch/amiga/dev/ite.c	2006-02-25 18:58:14.000000000 +0100
@@ -190,6 +190,7 @@ CFATTACH_DECL(ite, sizeof(struct ite_sof
 extern struct cfdriver ite_cd;
 
 dev_type_open(iteopen);
+dev_type_fdclose(itefdclose);
 dev_type_close(iteclose);
 dev_type_read(iteread);
 dev_type_write(itewrite);
@@ -199,7 +200,7 @@ dev_type_poll(itepoll);
 
 const struct cdevsw ite_cdevsw = {
 	iteopen, iteclose, iteread, itewrite, iteioctl,
-	nostop, itetty, itepoll, nommap, ttykqfilter, D_TTY
+	nostop, itetty, itepoll, nommap, ttykqfilter, D_TTY, itefdclose,
 };
 
 int
@@ -501,6 +502,10 @@ bad:
 	return (error);
 }
 
+int itefdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(getitesp(dev)->tp);
+}
+
 int
 iteclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/amiga/dev/mfc.c sys/arch/amiga/dev/mfc.c
--- sys~/arch/amiga/dev/mfc.c	2004-04-25 08:23:41.000000000 +0200
+++ sys/arch/amiga/dev/mfc.c	2006-02-26 13:20:10.000000000 +0100
@@ -241,6 +241,7 @@ CFATTACH_DECL(mfcp, sizeof(struct mfcp_s
 #endif
 
 dev_type_open(mfcsopen);
+dev_type_fdclose(mfcsfdclose);
 dev_type_close(mfcsclose);
 dev_type_read(mfcsread);
 dev_type_write(mfcswrite);
@@ -251,7 +252,7 @@ dev_type_poll(mfcspoll);
 
 const struct cdevsw mfcs_cdevsw = {
 	mfcsopen, mfcsclose, mfcsread, mfcswrite, mfcsioctl,
-	mfcsstop, mfcstty, mfcspoll, nommap, ttykqfilter, D_TTY
+	mfcsstop, mfcstty, mfcspoll, nommap, ttykqfilter, D_TTY, mfcsfdclose,
 };
 
 int	mfcs_active;
@@ -574,6 +575,11 @@ done:
 	return tp->t_linesw->l_open(dev, tp);
 }
 
+int mfcsfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct mfcs_softc *sc = mfcs_cd.cd_devs[dev & 31];
+    return tty_fdclose(sc->sc_tty);
+}
+
 /*ARGSUSED*/
 int
 mfcsclose(dev_t dev, int flag, int mode, struct proc *p)
diff --fast -Ndpru sys~/arch/amiga/dev/msc.c sys/arch/amiga/dev/msc.c
--- sys~/arch/amiga/dev/msc.c	2004-04-25 08:23:41.000000000 +0200
+++ sys/arch/amiga/dev/msc.c	2006-02-25 21:11:03.000000000 +0100
@@ -217,6 +217,7 @@ CFATTACH_DECL(msc, sizeof(struct device)
     mscmatch, mscattach, NULL, NULL);
 
 dev_type_open(mscopen);
+dev_type_fdclose(mscfdclose);
 dev_type_close(mscclose);
 dev_type_read(mscread);
 dev_type_write(mscwrite);
@@ -227,7 +228,7 @@ dev_type_poll(mscpoll);
 
 const struct cdevsw msc_cdevsw = {
 	mscopen, mscclose, mscread, mscwrite, mscioctl,
-	mscstop, msctty, mscpoll, nommap, ttykqfilter, D_TTY
+	mscstop, msctty, mscpoll, nommap, ttykqfilter, D_TTY, mscfdclose,
 };
 
 int
@@ -468,6 +469,14 @@ mscopen(dev_t dev, int flag, int mode, s
 	return tp->t_linesw->l_open(dev, tp);
 }
 
+int mscfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    int slot = MSCSLOT(dev);
+    if(slot >= MSCSLOTS)
+        return ENXIO;
+    if(!mscdev[slot].active)
+        return ENXIO;
+    return tty_fdclose(msc_tty[MSCTTY(dev)]);
+}
 
 int
 mscclose(dev_t dev, int flag, int mode, struct proc *p)
diff --fast -Ndpru sys~/arch/amiga/dev/ser.c sys/arch/amiga/dev/ser.c
--- sys~/arch/amiga/dev/ser.c	2003-08-07 18:26:44.000000000 +0200
+++ sys/arch/amiga/dev/ser.c	2006-02-26 13:19:37.000000000 +0100
@@ -81,6 +81,7 @@ CFATTACH_DECL(ser, sizeof(struct ser_sof
 extern struct cfdriver ser_cd;
 
 dev_type_open(seropen);
+dev_type_fdclose(serfdclose);
 dev_type_close(serclose);
 dev_type_read(serread);
 dev_type_write(serwrite);
@@ -91,7 +92,7 @@ dev_type_poll(serpoll);
 
 const struct cdevsw ser_cdevsw = {
 	seropen, serclose, serread, serwrite, serioctl,
-	serstop, sertty, serpoll, nommap, ttykqfilter, D_TTY
+	serstop, sertty, serpoll, nommap, ttykqfilter, D_TTY, serfdclose,
 };
 
 #ifndef SEROBUF_SIZE
@@ -366,6 +367,14 @@ bad:
 	return (error);
 }
 
+int serfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct ser_softc *sc = ser_cd.cd_devs[0];
+    struct tty *tty = sc->ser_tty;
+    if(!(tty->t_state & TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 /*ARGSUSED*/
 int
 serclose(dev_t dev, int flag, int mode, struct proc *p)
diff --fast -Ndpru sys~/arch/arc/dev/pccons.c sys/arch/arc/dev/pccons.c
--- sys~/arch/arc/dev/pccons.c	2005-01-22 08:35:34.000000000 +0100
+++ sys/arch/arc/dev/pccons.c	2006-02-26 13:20:42.000000000 +0100
@@ -176,6 +176,7 @@ void pccnpollc(dev_t, int);
 extern struct cfdriver pc_cd;
 
 dev_type_open(pcopen);
+dev_type_fdclose(pcfdclose);
 dev_type_close(pcclose);
 dev_type_read(pcread);
 dev_type_write(pcwrite);
@@ -186,7 +187,7 @@ dev_type_mmap(pcmmap);
 
 const struct cdevsw pc_cdevsw = {
 	pcopen, pcclose, pcread, pcwrite, pcioctl,
-	nostop, pctty, pcpoll, pcmmap, ttykqfilter, D_TTY
+	nostop, pctty, pcpoll, pcmmap, ttykqfilter, D_TTY, pcfdclose,
 };
 
 #define	CHR		2
@@ -626,6 +627,11 @@ pcopen(dev_t dev, int flag, int mode, st
 	return (*tp->t_linesw->l_open)(dev, tp);
 }
 
+int pcfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct pc_softc *sc = pc_cd.cd_devs[PCUNIT(dev)];
+    return tty_fdclose(sc->sc_tty);
+}
+
 int
 pcclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/arm/ep93xx/epcom.c sys/arch/arm/ep93xx/epcom.c
--- sys~/arch/arm/ep93xx/epcom.c	2004-12-29 07:31:32.000000000 +0100
+++ sys/arch/arm/ep93xx/epcom.c	2006-02-26 13:21:41.000000000 +0100
@@ -159,6 +159,7 @@ static struct cnm_state epcom_cnm_state;
 extern struct cfdriver epcom_cd;
 
 dev_type_open(epcomopen);
+dev_type_fdclose(epcomfdclose);
 dev_type_close(epcomclose);
 dev_type_read(epcomread);
 dev_type_write(epcomwrite);
@@ -169,7 +170,7 @@ dev_type_poll(epcompoll);
 
 const struct cdevsw epcom_cdevsw = {
 	epcomopen, epcomclose, epcomread, epcomwrite, epcomioctl,
-	epcomstop, epcomtty, epcompoll, nommap, ttykqfilter, D_TTY
+	epcomstop, epcomtty, epcompoll, nommap, ttykqfilter, D_TTY, epcomfdclose,
 };
 
 struct consdev epcomcons = {
@@ -595,6 +596,14 @@ bad:
 	return (error);
 }
 
+int epcomfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct epcom_softc* sc = device_lookup(&epcom_cd, COMUNIT(dev));
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 epcomclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/arm/footbridge/footbridge_com.c sys/arch/arm/footbridge/footbridge_com.c
--- sys~/arch/arm/footbridge/footbridge_com.c	2003-06-30 00:28:09.000000000 +0200
+++ sys/arch/arm/footbridge/footbridge_com.c	2006-02-26 13:22:08.000000000 +0100
@@ -124,6 +124,7 @@ CFATTACH_DECL(fcom, sizeof(struct fcom_s
 extern struct cfdriver fcom_cd;
 
 dev_type_open(fcomopen);
+dev_type_fdclose(fcomfdclose);
 dev_type_close(fcomclose);
 dev_type_read(fcomread);
 dev_type_write(fcomwrite);
@@ -133,7 +134,7 @@ dev_type_poll(fcompoll);
 
 const struct cdevsw fcom_cdevsw = {
 	fcomopen, fcomclose, fcomread, fcomwrite, fcomioctl,
-	nostop, fcomtty, fcompoll, nommap, ttykqfilter, D_TTY
+	nostop, fcomtty, fcompoll, nommap, ttykqfilter, D_TTY, fcomfdclose,
 };
 
 void fcominit	 	__P((bus_space_tag_t, bus_space_handle_t, int, int));
@@ -281,6 +282,14 @@ fcomopen(dev, flag, mode, p)
 	return (*tp->t_linesw->l_open)(dev, tp);
 }
 
+int fcomfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct fcom_softc *sc = fcom_cd.cd_devs[minor(dev)];
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 fcomclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/arm/iomd/console/console.c sys/arch/arm/iomd/console/console.c
--- sys~/arch/arm/iomd/console/console.c	2003-07-15 02:24:43.000000000 +0200
+++ sys/arch/arm/iomd/console/console.c	2006-02-25 18:58:52.000000000 +0100
@@ -138,6 +138,7 @@ int vconsole_blankcounter=BLANKINIT;
  * Device switch
  */
 dev_type_open(physconopen);
+dev_type_fdclose(physconfdclose);
 dev_type_close(physconclose);
 dev_type_read(physconread);
 dev_type_write(physconwrite);
@@ -148,7 +149,7 @@ dev_type_mmap(physconmmap);
 
 const struct cdevsw physcon_cdevsw = {
 	physconopen, physconclose, physconread, physconwrite, physconioctl,
-	nostop, physcontty, physconpoll, physconmmap, ttykqfilter, D_TTY
+	nostop, physcontty, physconpoll, physconmmap, ttykqfilter, D_TTY, physconfdclose,
 };
 
 /*
@@ -488,6 +489,13 @@ physconopen(dev, flag, mode, p)
 	return(ret);
 }
 
+int physconfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    struct tty *tty = find_tp(dev);
+    if(tty == NULL)
+        return ENXIO;
+    return tty_fdclose(tty);
+}
+
 /*
  * int physconclose(dev_t dev, int flag, int mode, struct proc *p)
  *
diff --fast -Ndpru sys~/arch/arm/ixp12x0/ixp12x0_com.c sys/arch/arm/ixp12x0/ixp12x0_com.c
--- sys~/arch/arm/ixp12x0/ixp12x0_com.c	2003-08-07 18:26:53.000000000 +0200
+++ sys/arch/arm/ixp12x0/ixp12x0_com.c	2006-02-26 13:22:43.000000000 +0100
@@ -147,6 +147,7 @@ struct ixpcom_softc* ixpcom_sc = NULL;
 extern struct cfdriver ixpcom_cd;
 
 dev_type_open(ixpcomopen);
+dev_type_fdclose(ixpcomfdclose);
 dev_type_close(ixpcomclose);
 dev_type_read(ixpcomread);
 dev_type_write(ixpcomwrite);
@@ -157,7 +158,7 @@ dev_type_poll(ixpcompoll);
 
 const struct cdevsw ixpcom_cdevsw = {
 	ixpcomopen, ixpcomclose, ixpcomread, ixpcomwrite, ixpcomioctl,
-	ixpcomstop, ixpcomtty, ixpcompoll, nommap, ttykqfilter, D_TTY
+	ixpcomstop, ixpcomtty, ixpcompoll, nommap, ttykqfilter, D_TTY, ixpcomfdclose,
 };
 
 struct consdev ixpcomcons = {
@@ -628,6 +629,14 @@ bad:
 	return (error);
 }
 
+int ixpcomfdclose(dev_t, dev, int flag, int mode, struct proc *p) {
+    const struct ixpcom_softc *sc = device_lookup(&ixpcom_cd, COMUNIT(dev));
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 ixpcomclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/arm/s3c2xx0/sscom.c sys/arch/arm/s3c2xx0/sscom.c
--- sys~/arch/arm/s3c2xx0/sscom.c	2003-08-07 18:26:54.000000000 +0200
+++ sys/arch/arm/s3c2xx0/sscom.c	2006-02-26 13:23:10.000000000 +0100
@@ -162,6 +162,7 @@ __KERNEL_RCSID(0, "$NetBSD: sscom.c,v 1.
 #include <dev/cons.h>
 
 dev_type_open(sscomopen);
+dev_type_fdclose(sscomfdclose);
 dev_type_close(sscomclose);
 dev_type_read(sscomread);
 dev_type_write(sscomwrite);
@@ -200,7 +201,7 @@ extern struct cfdriver sscom_cd;
 
 const struct cdevsw sscom_cdevsw = {
 	sscomopen, sscomclose, sscomread, sscomwrite, sscomioctl,
-	sscomstop, sscomtty, sscompoll, nommap, ttykqfilter, D_TTY
+	sscomstop, sscomtty, sscompoll, nommap, ttykqfilter, D_TTY, sscomfdclose,
 };
 
 /*
@@ -739,6 +740,14 @@ bad:
 	return error;
 }
  
+int sscomfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct sscom_softc *sc = device_lookup(&sscom_cd, SSCOMUNIT(dev));
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 sscomclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/arm/sa11x0/sa11x0_com.c sys/arch/arm/sa11x0/sa11x0_com.c
--- sys~/arch/arm/sa11x0/sa11x0_com.c	2003-08-07 18:26:54.000000000 +0200
+++ sys/arch/arm/sa11x0/sa11x0_com.c	2006-02-26 13:23:52.000000000 +0100
@@ -114,6 +114,7 @@ __KERNEL_RCSID(0, "$NetBSD: sa11x0_com.c
 #include "sacom.h"
 
 dev_type_open(sacomopen);
+dev_type_fdclose(sacomfdclose);
 dev_type_close(sacomclose);
 dev_type_read(sacomread);
 dev_type_write(sacomwrite);
@@ -124,7 +125,7 @@ dev_type_poll(sacompoll);
 
 const struct cdevsw sacom_cdevsw = {
 	sacomopen, sacomclose, sacomread, sacomwrite, sacomioctl,
-	sacomstop, sacomtty, sacompoll, nommap, ttykqfilter, D_TTY
+	sacomstop, sacomtty, sacompoll, nommap, ttykqfilter, D_TTY, sacomfdclose,
 };
 
 static	int	sacom_match(struct device *, struct cfdata *, void *);
@@ -664,6 +665,14 @@ bad:
 	return (error);
 }
  
+int sacomfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct sacom_softc *sc = device_lookup(&sacom_cd, COMUNIT(dev));
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 sacomclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/atari/dev/ite.c sys/arch/atari/dev/ite.c
--- sys~/arch/atari/dev/ite.c	2005-03-02 09:14:26.000000000 +0100
+++ sys/arch/atari/dev/ite.c	2006-02-25 19:00:11.000000000 +0100
@@ -188,6 +188,7 @@ CFATTACH_DECL(ite, sizeof(struct ite_sof
 extern struct cfdriver	ite_cd;
 
 dev_type_open(iteopen);
+dev_type_fdclose(itefdclose);
 dev_type_close(iteclose);
 dev_type_read(iteread);
 dev_type_write(itewrite);
@@ -197,7 +198,7 @@ dev_type_poll(itepoll);
 
 const struct cdevsw ite_cdevsw = {
 	iteopen, iteclose, iteread, itewrite, iteioctl,
-	nostop, itetty, itepoll, nommap, ttykqfilter, D_TTY
+	nostop, itetty, itepoll, nommap, ttykqfilter, D_TTY, itefdclose,
 };
 
 /*
@@ -487,6 +488,10 @@ bad:
 	return (error);
 }
 
+int itefdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(getitesp(dev)->tp);
+}
+
 int
 iteclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/atari/dev/ser.c sys/arch/atari/dev/ser.c
--- sys~/arch/atari/dev/ser.c	2005-02-11 07:21:21.000000000 +0100
+++ sys/arch/atari/dev/ser.c	2006-02-26 13:24:21.000000000 +0100
@@ -263,6 +263,7 @@ CFATTACH_DECL(ser, sizeof(struct ser_sof
 extern struct cfdriver ser_cd;
 
 dev_type_open(seropen);
+dev_type_fdclose(serfdclose);
 dev_type_close(serclose);
 dev_type_read(serread);
 dev_type_write(serwrite);
@@ -273,7 +274,7 @@ dev_type_poll(serpoll);
 
 const struct cdevsw ser_cdevsw = {
 	seropen, serclose, serread, serwrite, serioctl,
-	serstop, sertty, serpoll, nommap, ttykqfilter, D_TTY
+	serstop, sertty, serpoll, nommap, ttykqfilter, D_TTY, serfdclose,
 };
 
 /*ARGSUSED*/
@@ -498,6 +499,14 @@ bad:
 	return (error);
 }
  
+int serfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const sturct ser_softc *sc = ser_cd.cd_devs[SERUNIT(dev)];
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 serclose(dev, flag, mode, p)
 	dev_t		dev;
diff --fast -Ndpru sys~/arch/atari/dev/zs.c sys/arch/atari/dev/zs.c
--- sys~/arch/atari/dev/zs.c	2004-03-25 11:17:19.000000000 +0100
+++ sys/arch/atari/dev/zs.c	2006-02-26 13:27:45.000000000 +0100
@@ -229,6 +229,7 @@ extern struct cfdriver zs_cd;
 
 /* {b,c}devsw[] function prototypes */
 dev_type_open(zsopen);
+dev_type_fdclose(zsfdclose);
 dev_type_close(zsclose);
 dev_type_read(zsread);
 dev_type_write(zswrite);
@@ -239,7 +240,7 @@ dev_type_poll(zspoll);
 
 const struct cdevsw zs_cdevsw = {
 	zsopen, zsclose, zsread, zswrite, zsioctl,
-	zsstop, zstty, zspoll, nommap, ttykqfilter, D_TTY
+	zsstop, zstty, zspoll, nommap, ttykqfilter, D_TTY, zsfdclose,
 };
 
 /* Interrupt handlers. */
@@ -460,6 +461,11 @@ bad:
 	return(error);
 }
 
+int zsfdclose(dev_t dev, int flag, int mode, struct proc *proc) {
+    const struct zs_softc *sc = zs_cd.cd_devs[unit >> 1];
+    return tty_fdclose(sc->zi_cs[unit & 1].cs_ttyp);
+}
+
 /*
  * Close a zs serial port.
  */
diff --fast -Ndpru sys~/arch/bebox/isa/pccons.c sys/arch/bebox/isa/pccons.c
--- sys~/arch/bebox/isa/pccons.c	2004-03-13 18:31:33.000000000 +0100
+++ sys/arch/bebox/isa/pccons.c	2006-02-26 13:28:05.000000000 +0100
@@ -232,6 +232,7 @@ extern struct cfdriver pcconskbd_cd;
 #endif
 
 dev_type_open(pcopen);
+dev_type_fdclose(pcfdclose);
 dev_type_close(pcclose);
 dev_type_read(pcread);
 dev_type_write(pcwrite);
@@ -243,7 +244,7 @@ dev_type_mmap(pcmmap);
  
 const struct cdevsw pc_cdevsw = {
 	pcopen, pcclose, pcread, pcwrite, pcioctl,
-	pcstop, pctty, pcpoll, pcmmap, ttykqfilter, D_TTY
+	pcstop, pctty, pcpoll, pcmmap, ttykqfilter, D_TTY, pcfdclose,
 };
 
 #define	COL		80
@@ -876,6 +877,14 @@ pcopen(dev, flag, mode, p)
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int pcfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct pc_softc *sc = pc_cd.cd_devs[PCUNIT(dev)];
+    struct tty *tty = sc->sc_tty;
+    if(tty == NULL)
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 pcclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/evbarm/dev/plcom.c sys/arch/evbarm/dev/plcom.c
--- sys~/arch/evbarm/dev/plcom.c	2003-08-07 18:27:20.000000000 +0200
+++ sys/arch/evbarm/dev/plcom.c	2006-02-26 13:28:38.000000000 +0100
@@ -177,6 +177,7 @@ int	plcominit	(bus_space_tag_t, bus_addr
 			    bus_space_handle_t *);
 
 dev_type_open(plcomopen);
+dev_type_fdclose(plcomfdclose);
 dev_type_close(plcomclose);
 dev_type_read(plcomread);
 dev_type_write(plcomwrite);
@@ -210,7 +211,7 @@ extern struct cfdriver plcom_cd;
 
 const struct cdevsw plcom_cdevsw = {
 	plcomopen, plcomclose, plcomread, plcomwrite, plcomioctl,
-	plcomstop, plcomtty, plcompoll, nommap, ttykqfilter, D_TTY
+	plcomstop, plcomtty, plcompoll, nommap, ttykqfilter, D_TTY, plcomfdclose,
 };
 
 /*
@@ -774,6 +775,14 @@ bad:
 	return error;
 }
  
+int plcomfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct plcom_softc *sc = device_lookup(&plcom_cd, PLCOMUNIT(dev));
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 plcomclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/hp300/dev/dcm.c sys/arch/hp300/dev/dcm.c
--- sys~/arch/hp300/dev/dcm.c	2005-03-14 13:50:33.000000000 +0100
+++ sys/arch/hp300/dev/dcm.c	2006-02-26 13:29:33.000000000 +0100
@@ -364,6 +364,7 @@ int	dcmdefaultrate = DEFAULT_BAUD_RATE;
 int	dcmconbrdbusy = 0;
 
 static dev_type_open(dcmopen);
+static dev_type_fdclose(dcmfdclose);
 static dev_type_close(dcmclose);
 static dev_type_read(dcmread);
 static dev_type_write(dcmwrite);
@@ -374,7 +375,7 @@ static dev_type_poll(dcmpoll);
 
 const struct cdevsw dcm_cdevsw = {
 	dcmopen, dcmclose, dcmread, dcmwrite, dcmioctl,
-	dcmstop, dcmtty, dcmpoll, nommap, ttykqfilter, D_TTY
+	dcmstop, dcmtty, dcmpoll, nommap, ttykqfilter, D_TTY, dcmfdclose,
 };
 
 static int
@@ -611,6 +612,14 @@ dcmopen(dev_t dev, int flag, int mode, s
 	return (error);
 }
 
+static int dcmfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    int unit  = DCMUNIT(dev);
+    int board = DCMBOARD(unit);
+    int port  = DCMPORT(unit);
+    const struct dcm_softc *sc = dcm_cd.cd_devs[board];
+    return tty_fdclose(sc->sc_tty[port]);
+}
+
 /*ARGSUSED*/
 static int
 dcmclose(dev_t dev, int flag, int mode, struct proc *p)
diff --fast -Ndpru sys~/arch/hp300/dev/ite.c sys/arch/hp300/dev/ite.c
--- sys~/arch/hp300/dev/ite.c	2005-02-19 17:31:49.000000000 +0100
+++ sys/arch/hp300/dev/ite.c	2006-02-26 13:30:49.000000000 +0100
@@ -167,6 +167,7 @@ CFATTACH_DECL(ite, sizeof(struct ite_sof
 static struct kbdmap *ite_km;
 
 static dev_type_open(iteopen);
+static dev_type_fdclose(itefdclose);
 static dev_type_close(iteclose);
 static dev_type_read(iteread);
 static dev_type_write(itewrite);
@@ -176,7 +177,7 @@ static dev_type_poll(itepoll);
 
 const struct cdevsw ite_cdevsw = {
 	iteopen, iteclose, iteread, itewrite, iteioctl,
-	nostop, itetty, itepoll, nommap, ttykqfilter, D_TTY
+	nostop, itetty, itepoll, nommap, ttykqfilter, D_TTY, itefdclose,
 };
 
 /*
@@ -429,6 +430,11 @@ iteopen(dev_t dev, int mode, int devtype
 	return (error);
 }
 
+static int itefdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct ite_softc *sc = ite_cd.cd_devs[ITEUNIT(dev)];
+    return tty_fdclose(sc->sc_data->tty);
+}
+
 /*ARGSUSED*/
 static int
 iteclose(dev_t dev, int flag, int mode, struct proc *p)
diff --fast -Ndpru sys~/arch/hp700/dev/pdc.c sys/arch/hp700/dev/pdc.c
--- sys~/arch/hp700/dev/pdc.c	2004-12-13 03:14:13.000000000 +0100
+++ sys/arch/hp700/dev/pdc.c	2006-02-25 21:02:24.000000000 +0100
@@ -77,6 +77,7 @@ extern struct cfdriver pdc_cd;
 static int pdc_attached;
 
 dev_type_open(pdcopen);
+dev_type_fdclose(pdcfdclose);
 dev_type_close(pdcclose);
 dev_type_read(pdcread);
 dev_type_write(pdcwrite);
@@ -87,7 +88,7 @@ dev_type_poll(pdcpoll);
 
 const struct cdevsw pdc_cdevsw = {
 	pdcopen, pdcclose, pdcread, pdcwrite, pdcioctl,
-	pdcstop, pdctty, pdcpoll, nommap, ttykqfilter, D_TTY
+	pdcstop, pdctty, pdcpoll, nommap, ttykqfilter, D_TTY, pdcfdclose,
 };
 
 void pdcstart(struct tty *);
@@ -211,6 +212,16 @@ pdcopen(dev_t dev, int flag, int mode, s
 	return error;
 }
 
+int pdcfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct pdc_softc *sc;
+    int unit = minor(dev);
+
+    if(uint >= pdc_cd.cd_ndevs || (sc = pdc_cd.cd_devs[unit]) == NULL)
+        return ENXIO;
+
+    return tty_fdclose(sc->sc_tty);
+}
+
 int
 pdcclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/hpcmips/tx/txcom.c sys/arch/hpcmips/tx/txcom.c
--- sys~/arch/hpcmips/tx/txcom.c	2004-06-12 17:39:33.000000000 +0200
+++ sys/arch/hpcmips/tx/txcom.c	2006-02-26 13:31:16.000000000 +0100
@@ -178,6 +178,7 @@ CFATTACH_DECL(txcom, sizeof(struct txcom
     txcom_match, txcom_attach, NULL, NULL);
 
 dev_type_open(txcomopen);
+dev_type_fdclose(txcomfdclose);
 dev_type_close(txcomclose);
 dev_type_read(txcomread);
 dev_type_write(txcomwrite);
@@ -188,7 +189,7 @@ dev_type_poll(txcompoll);
 
 const struct cdevsw txcom_cdevsw = {
 	txcomopen, txcomclose, txcomread, txcomwrite, txcomioctl,
-	txcomstop, txcomtty, txcompoll, nommap, ttykqfilter, D_TTY
+	txcomstop, txcomtty, txcompoll, nommap, ttykqfilter, D_TTY, txcomfdclose,
 };
 
 int
@@ -882,6 +883,14 @@ txcomopen(dev_t dev, int flag, int mode,
 
 }
 
+int txcomfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct txcom_softc *sc = txcom_cd.cd_devs[minor(dev)];
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(sc->sc_tty);
+}
+
 int
 txcomclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/i386/isa/pccons.c sys/arch/i386/isa/pccons.c
--- sys~/arch/i386/isa/pccons.c	2005-02-03 22:08:58.000000000 +0100
+++ sys/arch/i386/isa/pccons.c	2006-02-26 13:31:35.000000000 +0100
@@ -228,6 +228,7 @@ extern struct cfdriver pcconskbd_cd;
 #endif
 
 dev_type_open(pcopen);
+dev_type_fdclose(pcfdclose);
 dev_type_close(pcclose);
 dev_type_read(pcread);
 dev_type_write(pcwrite);
@@ -239,7 +240,7 @@ dev_type_mmap(pcmmap);
  
 const struct cdevsw pc_cdevsw = {
 	pcopen, pcclose, pcread, pcwrite, pcioctl,
-	pcstop, pctty, pcpoll, pcmmap, ttykqfilter, D_TTY
+	pcstop, pctty, pcpoll, pcmmap, ttykqfilter, D_TTY, pcfdclose,
 };
 
 #define	COL		80
@@ -853,6 +854,14 @@ pcopen(dev_t dev, int flag, int mode, st
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int pcfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct pc_softc *sc = pc_cd.cd_devs[PCUNIT(dev)];
+    struct tty *tty = sc->sc_tty;
+    if(tty == NULL)
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 pcclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/luna68k/dev/siotty.c sys/arch/luna68k/dev/siotty.c
--- sys~/arch/luna68k/dev/siotty.c	2004-04-25 08:23:41.000000000 +0200
+++ sys/arch/luna68k/dev/siotty.c	2006-02-26 13:34:24.000000000 +0100
@@ -100,6 +100,7 @@ CFATTACH_DECL(siotty, sizeof(struct siot
 extern struct cfdriver siotty_cd;
 
 dev_type_open(sioopen);
+dev_type_fdclose(siofdclose);
 dev_type_close(sioclose);
 dev_type_read(sioread);
 dev_type_write(siowrite);
@@ -110,7 +111,7 @@ dev_type_poll(siopoll);
 
 const struct cdevsw siotty_cdevsw = {
 	sioopen, sioclose, sioread, siowrite, sioioctl,
-	siostop, siotty, siopoll, nommap, ttykqfilter, D_TTY
+	siostop, siotty, siopoll, nommap, ttykqfilter, D_TTY, siofdclose,
 };
 
 static int 
@@ -417,6 +418,11 @@ sioopen(dev, flag, mode, p)
 	return (*tp->t_linesw->l_open)(dev, tp);
 }
  
+int siofdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct siotty_softc *sc = siotty_cd.cd_devs[minor(dev)];
+    return tty_fdclose(sc->sc_tty);
+}
+
 int
 sioclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/macppc/dev/ofcons.c sys/arch/macppc/dev/ofcons.c
--- sys~/arch/macppc/dev/ofcons.c	2003-11-04 20:18:05.000000000 +0100
+++ sys/arch/macppc/dev/ofcons.c	2006-02-26 13:34:45.000000000 +0100
@@ -71,6 +71,7 @@ CFATTACH_DECL(macofcons, sizeof(struct o
 extern struct cfdriver macofcons_cd;
 
 dev_type_open(ofcopen);
+dev_type_fdclose(ofcfdclose);
 dev_type_close(ofcclose);
 dev_type_read(ofcread);
 dev_type_write(ofcwrite);
@@ -80,7 +81,7 @@ dev_type_poll(ofcpoll);
 
 const struct cdevsw macofcons_cdevsw = {
 	ofcopen, ofcclose, ofcread, ofcwrite, ofcioctl,
-	nostop, ofctty, ofcpoll, nommap, ttykqfilter, D_TTY
+	nostop, ofctty, ofcpoll, nommap, ttykqfilter, D_TTY, ofcfdclose,
 };
 
 /* For polled ADB mode */
@@ -151,6 +152,11 @@ ofcopen(dev_t dev, int flag, int mode, s
 	return (*tp->t_linesw->l_open)(dev, tp);
 }
 
+int ofcfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct ofcons_softc *sc = macofcons_cd.cd_devs[minor(dev)];
+    return tty_fdclose(sc->of_tty);
+}
+
 int
 ofcclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/macppc/dev/z8530tty.c sys/arch/macppc/dev/z8530tty.c
--- sys~/arch/macppc/dev/z8530tty.c	2003-12-04 14:05:16.000000000 +0100
+++ sys/arch/macppc/dev/z8530tty.c	2006-02-26 13:35:08.000000000 +0100
@@ -241,6 +241,7 @@ CFATTACH_DECL(zstty, sizeof(struct zstty
 extern struct cfdriver zstty_cd;
 
 dev_type_open(zsopen);
+dev_type_fdclose(zsfdclose);
 dev_type_close(zsclose);
 dev_type_read(zsread);
 dev_type_write(zswrite);
@@ -251,7 +252,7 @@ dev_type_poll(zspoll);
 
 const struct cdevsw zstty_cdevsw = {
 	zsopen, zsclose, zsread, zswrite, zsioctl,
-	zsstop, zstty, zspoll, nommap, ttykqfilter, D_TTY
+	zsstop, zstty, zspoll, nommap, ttykqfilter, D_TTY, zsfdclose,
 };
 
 struct zsops zsops_tty;
@@ -611,6 +612,14 @@ bad:
 	return (error);
 }
 
+int zsfdclose(dev_t dev, int flags, int mode, struct proc *p) {
+    const struct zstty_softc *sc = zstty_cd.cd_devs[ZSUNIT(dev)];
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 /*
  * Close a zs serial port.
  */
diff --fast -Ndpru sys~/arch/mips/alchemy/dev/aucom.c sys/arch/mips/alchemy/dev/aucom.c
--- sys~/arch/mips/alchemy/dev/aucom.c	2004-05-01 21:03:59.000000000 +0200
+++ sys/arch/mips/alchemy/dev/aucom.c	2006-02-26 13:35:29.000000000 +0100
@@ -228,6 +228,7 @@ void	comdiag(void *);
 extern struct cfdriver com_cd;
 
 dev_type_open(comopen);
+dev_type_fdclose(comfdclose);
 dev_type_close(comclose);
 dev_type_read(comread);
 dev_type_write(comwrite);
@@ -238,7 +239,7 @@ dev_type_poll(compoll);
 
 const struct cdevsw com_cdevsw = {
 	comopen, comclose, comread, comwrite, comioctl,
-	comstop, comtty, compoll, nommap, ttykqfilter, D_TTY
+	comstop, comtty, compoll, nommap, ttykqfilter, D_TTY, comfdclose,
 };
 
 /*
@@ -1017,6 +1018,14 @@ bad:
 	return (error);
 }
  
+int comfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct com_softc *sc = device_lookup(&com_cd, COMUNIT(dev));
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 comclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/mips/sibyte/dev/sbjcn.c sys/arch/mips/sibyte/dev/sbjcn.c
--- sys~/arch/mips/sibyte/dev/sbjcn.c	2003-08-07 18:28:35.000000000 +0200
+++ sys/arch/mips/sibyte/dev/sbjcn.c	2006-02-26 13:36:25.000000000 +0100
@@ -173,6 +173,7 @@ void	sbjcn_cnpollc(dev_t dev, int on);
 extern struct cfdriver sbjcn_cd;
 
 dev_type_open(sbjcnopen);
+dev_type_fdclose(sbjcnfdclose);
 dev_type_close(sbjcnclose);
 dev_type_read(sbjcnread);
 dev_type_write(sbjcnwrite);
@@ -182,7 +183,7 @@ dev_type_tty(sbjcntty);
 
 const struct cdevsw sbjcn_cdevsw = {
 	sbjcnopen, sbjcnclose, sbjcnread, sbjcnwrite, sbjcnioctl,
-	sbjcnstop, sbjcntty, nopoll, nommap, ttykqfilter, D_TTY
+	sbjcnstop, sbjcntty, nopoll, nommap, ttykqfilter, D_TTY, sbjcnfdclose,
 };
 
 #define	integrate	static inline
@@ -619,6 +620,14 @@ bad:
 	return (error);
 }
 
+int sbjcnfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct sbjcn_softc *sc = sbjcn_cd.cd_devs[SBJCN_UNIT(dev)];
+    struct tty *tty = sc->sc_channels[SBJCN_CHAN(dev)].ch_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 sbjcnclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/mips/sibyte/dev/sbscn.c sys/arch/mips/sibyte/dev/sbscn.c
--- sys~/arch/mips/sibyte/dev/sbscn.c	2003-08-07 18:28:35.000000000 +0200
+++ sys/arch/mips/sibyte/dev/sbscn.c	2006-02-26 13:37:02.000000000 +0100
@@ -184,6 +184,7 @@ void	sbscn_cnpollc(dev_t dev, int on);
 extern struct cfdriver sbscn_cd;
 
 dev_type_open(sbscnopen);
+dev_type_fdclose(sbscnfdclose);
 dev_type_close(sbscnclose);
 dev_type_read(sbscnread);
 dev_type_write(sbscnwrite);
@@ -194,7 +195,7 @@ dev_type_poll(sbscnpoll);
 
 const struct cdevsw sbscn_cdevsw = {
 	sbscnopen, sbscnclose, sbscnread, sbscnwrite, sbscnioctl,
-	sbscnstop, sbscntty, sbscnpoll, nommap, ttykqfilter, D_TTY
+	sbscnstop, sbscntty, sbscnpoll, nommap, ttykqfilter, D_TTY, sbscnfdclose,
 };
 
 #define	integrate	static inline
@@ -675,6 +676,14 @@ bad:
 	return (error);
 }
 
+int sbscnfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct sbscn_softc *sc = sbscn_cd.cd_devs[SBSCN_UNIT(dev)];
+    struct tty *tty = sc->sc_channels[SBSCN_CHAN(dev)].ch_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 sbscnclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/pc532/dev/scn.c sys/arch/pc532/dev/scn.c
--- sys~/arch/pc532/dev/scn.c	2005-02-22 15:46:47.000000000 +0100
+++ sys/arch/pc532/dev/scn.c	2006-02-26 13:37:49.000000000 +0100
@@ -140,6 +140,7 @@ CFATTACH_DECL(scn, sizeof(struct scn_sof
 extern struct cfdriver scn_cd;
 
 dev_type_open(scnopen);
+dev_type_fdclose(scnfdclose);
 dev_type_close(scnclose);
 dev_type_read(scnread);
 dev_type_write(scnwrite);
@@ -150,7 +151,7 @@ dev_type_poll(scnpoll);
 
 const struct cdevsw scn_cdevsw = {
 	scnopen, scnclose, scnread, scnwrite, scnioctl,
-	scnstop, scntty, scnpoll, nommap, ttykqfilter, D_TTY
+	scnstop, scntty, scnpoll, nommap, ttykqfilter, D_TTY, scnfdclose,
 };
 
 #ifndef CONSOLE_SPEED
@@ -1220,6 +1221,13 @@ scnopen(dev, flag, mode, p)
 	return (error);
 }
 
+int scnfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct scn_softc *sc = SOFTC(DEV_UNIT(dev));
+    struct tty *tty = sc->sc_tty;
+    if(!(tp->t_state & TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
 
 /*ARGSUSED*/
 int
diff --fast -Ndpru sys~/arch/pmax/dev/dc.c sys/arch/pmax/dev/dc.c
--- sys~/arch/pmax/dev/dc.c	2004-04-25 08:23:41.000000000 +0200
+++ sys/arch/pmax/dev/dc.c	2006-02-26 13:38:15.000000000 +0100
@@ -94,6 +94,7 @@ __KERNEL_RCSID(0, "$NetBSD: dc.c,v 1.78 
 extern struct cfdriver dc_cd;
 
 dev_type_open(dcopen);
+dev_type_fdclose(dcfdclose);
 dev_type_close(dcclose);
 dev_type_read(dcread);
 dev_type_write(dcwrite);
@@ -104,7 +105,7 @@ dev_type_poll(dcpoll);
 
 const struct cdevsw dc_cdevsw = {
 	dcopen, dcclose, dcread, dcwrite, dcioctl,
-	dcstop, dctty, dcpoll, nommap, ttykqfilter, D_TTY
+	dcstop, dctty, dcpoll, nommap, ttykqfilter, D_TTY, dcfdclose,
 };
 
 /*
@@ -535,6 +536,11 @@ dcopen(dev, flag, mode, p)
 	return (error);
 }
 
+int dcfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct dc_softc *sc = dc_cd.cd_devs[DCUNIT(dev)];
+    return tty_fdclose(sc->dc_tty[DCLINE(dev)]);
+}
+
 /*ARGSUSED*/
 int
 dcclose(dev, flag, mode, p)
diff --fast -Ndpru sys~/arch/pmax/dev/dtop.c sys/arch/pmax/dev/dtop.c
--- sys~/arch/pmax/dev/dtop.c	2003-08-07 18:29:08.000000000 +0200
+++ sys/arch/pmax/dev/dtop.c	2006-02-25 21:18:20.000000000 +0100
@@ -229,6 +229,7 @@ CFATTACH_DECL(dtop, sizeof(struct dtop_s
 extern struct cfdriver dtop_cd;
 
 dev_type_open(dtopopen);
+dev_type_fdclose(dtopfdclose);
 dev_type_close(dtopclose);
 dev_type_read(dtopread);
 dev_type_write(dtopwrite);
@@ -239,7 +240,7 @@ dev_type_poll(dtoppoll);
 
 const struct cdevsw dtop_cdevsw = {
 	dtopopen, dtopclose, dtopread, dtopwrite, dtopioctl,
-	dtopstop, dtoptty, dtoppoll, nommap, ttykqfilter, D_TTY
+	dtopstop, dtoptty, dtoppoll, nommap, ttykqfilter, D_TTY, dtopfdclose,
 };
 
 /* QVSS-compatible in-kernel X input event parser, pointer tracker */
@@ -361,6 +362,10 @@ dtopopen(dev, flag, mode, p)
 	return (error);
 }
 
+int dtopfdcose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(DTOP_TTY(minor(dev)));
+}
+
 /*ARGSUSED*/
 int
 dtopclose(dev, flag, mode, p)
diff --fast -Ndpru sys~/arch/pmax/dev/rcons.c sys/arch/pmax/dev/rcons.c
--- sys~/arch/pmax/dev/rcons.c	2003-08-07 18:29:10.000000000 +0200
+++ sys/arch/pmax/dev/rcons.c	2006-02-25 21:19:19.000000000 +0100
@@ -84,6 +84,7 @@ static void	rcons_later __P((void*));
 #endif
 
 dev_type_open(rconsopen);
+dev_type_fdclose(rconsfdclose);
 dev_type_close(rconsclose);
 dev_type_read(rconsread);
 dev_type_write(rconswrite);
@@ -93,7 +94,7 @@ dev_type_poll(rconspoll);
 
 const struct cdevsw rcons_cdevsw = {
 	rconsopen, rconsclose, rconsread, rconswrite, rconsioctl,
-	nostop, rconstty, rconspoll, nommap, ttykqfilter, D_TTY
+	nostop, rconstty, rconspoll, nommap, ttykqfilter, D_TTY, rconsfdclose,
 };
 
 /*
@@ -342,6 +343,10 @@ rconsopen(dev, flag, mode, p)
 	return status;
 }
 
+int rconsfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(&rcons_tty[0]);
+}
+
 /* ARGSUSED */
 int
 rconsclose(dev, flag, mode, p)
diff --fast -Ndpru sys~/arch/pmax/tc/scc.c sys/arch/pmax/tc/scc.c
--- sys~/arch/pmax/tc/scc.c	2004-08-26 20:08:04.000000000 +0200
+++ sys/arch/pmax/tc/scc.c	2006-02-26 13:38:38.000000000 +0100
@@ -209,6 +209,7 @@ CFATTACH_DECL(scc, sizeof (struct scc_so
 extern struct cfdriver scc_cd;
 
 dev_type_open(sccopen);
+dev_type_fdclose(sccfdclose);
 dev_type_close(sccclose);
 dev_type_read(sccread);
 dev_type_write(sccwrite);
@@ -219,7 +220,7 @@ dev_type_poll(sccpoll);
 
 const struct cdevsw scc_cdevsw = {
 	sccopen, sccclose, sccread, sccwrite, sccioctl,
-	sccstop, scctty, sccpoll, nommap, ttykqfilter, D_TTY
+	sccstop, scctty, sccpoll, nommap, ttykqfilter, D_TTY, sccfdclose,
 };
 
 /* QVSS-compatible in-kernel X input event parser, pointer tracker */
@@ -686,6 +687,11 @@ bad:
 	return (error);
 }
 
+int sccfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct scc_softc *sc = scc_cd.cd_devs[SCCUNIT(dev)];
+    return tty_fdclose(sc->scc_tty[SCCLINE(dev)]);
+}
+
 /*ARGSUSED*/
 int
 sccclose(dev, flag, mode, p)
diff --fast -Ndpru sys~/arch/sh3/dev/sci.c sys/arch/sh3/dev/sci.c
--- sys~/arch/sh3/dev/sci.c	2005-03-11 08:08:33.000000000 +0100
+++ sys/arch/sh3/dev/sci.c	2006-02-26 13:38:55.000000000 +0100
@@ -264,6 +264,7 @@ extern struct cfdriver sci_cd;
 static int sci_attached;
 
 dev_type_open(sciopen);
+dev_type_fdclose(scifdclose);
 dev_type_close(sciclose);
 dev_type_read(sciread);
 dev_type_write(sciwrite);
@@ -274,7 +275,7 @@ dev_type_poll(scipoll);
 
 const struct cdevsw sci_cdevsw = {
 	sciopen, sciclose, sciread, sciwrite, sciioctl,
-	scistop, scitty, scipoll, nommap, ttykqfilter, D_TTY
+	scistop, scitty, scipoll, nommap, ttykqfilter, D_TTY, scifdclose,
 };
 
 void InitializeSci (unsigned int);
@@ -755,6 +756,14 @@ bad:
 	return (error);
 }
 
+int scifdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct sci_softc *sc = sci_cd.cd_devs[SCIUNIT(dev)];
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 sciclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/sh3/dev/scif.c sys/arch/sh3/dev/scif.c
--- sys~/arch/sh3/dev/scif.c	2004-12-13 03:14:13.000000000 +0100
+++ sys/arch/sh3/dev/scif.c	2006-02-26 13:39:14.000000000 +0100
@@ -271,6 +271,7 @@ extern struct cfdriver scif_cd;
 static int scif_attached;
 
 dev_type_open(scifopen);
+dev_type_fdclose(sciffdclose);
 dev_type_close(scifclose);
 dev_type_read(scifread);
 dev_type_write(scifwrite);
@@ -281,7 +282,7 @@ dev_type_poll(scifpoll);
 
 const struct cdevsw scif_cdevsw = {
 	scifopen, scifclose, scifread, scifwrite, scifioctl,
-	scifstop, sciftty, scifpoll, nommap, ttykqfilter, D_TTY
+	scifstop, sciftty, scifpoll, nommap, ttykqfilter, D_TTY, sciffdclose,
 };
 
 void InitializeScif (unsigned int);
@@ -852,6 +853,14 @@ bad:
 	return (error);
 }
 
+int sciffdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct scif_softc *sc = scif_cd.cd_devs[SCIFUNIT(dev)];
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 scifclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/sh5/dev/scif.c sys/arch/sh5/dev/scif.c
--- sys~/arch/sh5/dev/scif.c	2004-12-13 03:34:03.000000000 +0100
+++ sys/arch/sh5/dev/scif.c	2006-02-26 13:39:36.000000000 +0100
@@ -263,6 +263,7 @@ CFATTACH_DECL(scif, sizeof(struct scif_s
 extern struct cfdriver scif_cd;
 
 dev_type_open(scifopen);
+dev_type_fdclose(sciffdclose);
 dev_type_close(scifclose);
 dev_type_read(scifread);
 dev_type_write(scifwrite);
@@ -273,7 +274,7 @@ dev_type_poll(scifpoll);
 
 const struct cdevsw scif_cdevsw = {
 	scifopen, scifclose, scifread, scifwrite, scifioctl,
-	scifstop, sciftty, scifpoll, nommap, ttykqfilter, D_TTY
+	scifstop, sciftty, scifpoll, nommap, ttykqfilter, D_TTY, sciffdclose,
 };
 
 void InitializeScif(bus_space_tag_t, bus_space_handle_t, unsigned int);
@@ -870,6 +871,14 @@ bad:
 	return (error);
 }
 
+int sciffdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct scif_softc *sc = scif_cd.cd_devs[SCIFUNIT(dev)];
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 scifclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/shark/shark/pccons.c sys/arch/shark/shark/pccons.c
--- sys~/arch/shark/shark/pccons.c	2005-01-05 11:25:43.000000000 +0100
+++ sys/arch/shark/shark/pccons.c	2006-02-26 13:40:06.000000000 +0100
@@ -398,6 +398,7 @@ CFATTACH_DECL(pc, sizeof(struct pc_softc
 extern struct cfdriver pc_cd;
 
 dev_type_open(pcopen);
+dev_type_fdclose(pcfdclose);
 dev_type_close(pcclose);
 dev_type_read(pcread);
 dev_type_write(pcwrite);
@@ -408,7 +409,7 @@ dev_type_mmap(pcmmap);
 
 const struct cdevsw pc_cdevsw = {
 	pcopen, pcclose, pcread, pcwrite, pcioctl,
-	nostop, pctty, pcpoll, pcmmap, ttykqfilter, D_TTY
+	nostop, pctty, pcpoll, pcmmap, ttykqfilter, D_TTY, pcfdclose,
 };
 
 static unsigned int   addr_6845   = MONO_BASE;
@@ -1223,7 +1224,10 @@ pcopen(dev_t       dev, 
     return ((*tp->t_linesw->l_open)(dev, tp));
 } /* End pcopen() */
 
-
+int pcfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct pc_softc *sc = pc_cd.cd_devs[PCUNIT(dev)];
+    return tty_fdclose(sc->sc_tty);
+}
 
 /*
 **++
diff --fast -Ndpru sys~/arch/sparc/dev/kd.c sys/arch/sparc/dev/kd.c
--- sys~/arch/sparc/dev/kd.c	2004-03-17 18:04:59.000000000 +0100
+++ sys/arch/sparc/dev/kd.c	2006-02-25 21:33:06.000000000 +0100
@@ -104,6 +104,7 @@ static void kd_init(struct kd_softc *);
 static void kd_cons_input(int);
 
 dev_type_open(kdopen);
+dev_type_fdclose(kdfdclose);
 dev_type_close(kdclose);
 dev_type_read(kdread);
 dev_type_write(kdwrite);
@@ -113,7 +114,7 @@ dev_type_poll(kdpoll);
 
 const struct cdevsw kd_cdevsw = {
 	kdopen, kdclose, kdread, kdwrite, kdioctl,
-	nostop, kdtty, kdpoll, nommap, ttykqfilter, D_TTY
+	nostop, kdtty, kdpoll, nommap, ttykqfilter, D_TTY, kdfdclose,
 };
 
 /*
@@ -246,6 +247,13 @@ static	int firstopen = 1;
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int kdfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    struct tty *tty = kd_softc.kd_tty;
+    if(!(tty->t_state & TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 kdclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/sparc64/dev/kd.c sys/arch/sparc64/dev/kd.c
--- sys~/arch/sparc64/dev/kd.c	2005-02-25 20:16:45.000000000 +0100
+++ sys/arch/sparc64/dev/kd.c	2006-02-25 21:34:22.000000000 +0100
@@ -71,6 +71,7 @@ __KERNEL_RCSID(0, "$NetBSD: kd.c,v 1.33 
 #include <sparc64/dev/cons.h>
 
 dev_type_open(kdopen);
+dev_type_fdclose(kdfdclose);
 dev_type_close(kdclose);
 dev_type_read(kdread);
 dev_type_write(kdwrite);
@@ -80,7 +81,7 @@ dev_type_poll(kdpoll);
 
 const struct cdevsw kd_cdevsw = {
 	kdopen, kdclose, kdread, kdwrite, kdioctl,
-	nostop, kdtty, kdpoll, nommap, ttykqfilter, D_TTY
+	nostop, kdtty, kdpoll, nommap, ttykqfilter, D_TTY, kdfdclose,
 };
 
 struct	tty *fbconstty = 0;	/* tty structure for frame buffer console */
@@ -221,6 +222,13 @@ static	int firstopen = 1;
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int kdfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    struct tty *tty = kd_softc.kd_tty;
+    if(!(tty->t_state & TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 kdclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/sparc64/dev/pcons.c sys/arch/sparc64/dev/pcons.c
--- sys~/arch/sparc64/dev/pcons.c	2004-03-21 16:08:24.000000000 +0100
+++ sys/arch/sparc64/dev/pcons.c	2006-02-26 13:40:32.000000000 +0100
@@ -69,6 +69,7 @@ CFATTACH_DECL(pcons, sizeof(struct pcons
 extern struct cfdriver pcons_cd;
 
 dev_type_open(pconsopen);
+dev_type_fdclose(pconsfdclose);
 dev_type_close(pconsclose);
 dev_type_read(pconsread);
 dev_type_write(pconswrite);
@@ -78,7 +79,7 @@ dev_type_poll(pconspoll);
 
 const struct cdevsw pcons_cdevsw = {
 	pconsopen, pconsclose, pconsread, pconswrite, pconsioctl,
-	nostop, pconstty, pconspoll, nommap, ttykqfilter, D_TTY
+	nostop, pconstty, pconspoll, nommap, ttykqfilter, D_TTY, pconsfdclose,
 };
 
 static struct cnm_state pcons_cnm_state;
@@ -163,6 +164,11 @@ pconsopen(dev, flag, mode, p)
 	return (*tp->t_linesw->l_open)(dev, tp);
 }
 
+int pconsfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct pconssoftc *sc = pcons_cd.cd_devs[minor(dev)];
+    return tty_fdclose(sc->of_tty);
+}
+
 int
 pconsclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/sparc64/dev/sab.c sys/arch/sparc64/dev/sab.c
--- sys~/arch/sparc64/dev/sab.c	2004-09-13 16:32:38.000000000 +0200
+++ sys/arch/sparc64/dev/sab.c	2006-02-26 13:40:52.000000000 +0100
@@ -166,6 +166,7 @@ CFATTACH_DECL(sabtty, sizeof(struct sabt
 extern struct cfdriver sabtty_cd;
 
 dev_type_open(sabopen);
+dev_type_fdclose(sabfdclose);
 dev_type_close(sabclose);
 dev_type_read(sabread);
 dev_type_write(sabwrite);
@@ -178,7 +179,7 @@ static struct cnm_state sabtty_cnm_state
 
 const struct cdevsw sabtty_cdevsw = {
 	sabopen, sabclose, sabread, sabwrite, sabioctl,
-	sabstop, sabtty, sabpoll, nommap, ttykqfilter, D_TTY
+	sabstop, sabtty, sabpoll, nommap, ttykqfilter, D_TTY, sabfdclose,
 };
 
 struct sabtty_rate {
@@ -761,6 +762,11 @@ sabopen(dev, flags, mode, p)
 	return (s);
 }
 
+int sabfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct sabtty_softc *sc = device_lookup(&sabtty_cd, SABUNIT(dev));
+    return tty_fdclose(sc->sc_tty);
+}
+
 int
 sabclose(dev, flags, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/arch/sun2/dev/kd.c sys/arch/sun2/dev/kd.c
--- sys~/arch/sun2/dev/kd.c	2005-01-22 16:36:09.000000000 +0100
+++ sys/arch/sun2/dev/kd.c	2006-02-25 21:37:06.000000000 +0100
@@ -103,6 +103,7 @@ static void kd_cons_input(int);
 static int  kdcngetc(dev_t);
 
 dev_type_open(kdopen);
+dev_type_fdclose(kdfdclose);
 dev_type_close(kdclose);
 dev_type_read(kdread);
 dev_type_write(kdwrite);
@@ -112,7 +113,7 @@ dev_type_poll(kdpoll);
 
 const struct cdevsw kd_cdevsw = {
 	kdopen, kdclose, kdread, kdwrite, kdioctl,
-	nostop, kdtty, kdpoll, nommap, ttykqfilter, D_TTY
+	nostop, kdtty, kdpoll, nommap, ttykqfilter, D_TTY, kdfdclose,
 };
 
 /*
@@ -260,6 +261,13 @@ static	int firstopen = 1;
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int kdfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    struct tty *tty = kd_softc.kd_tty;
+    if(!(tty->t_state & TS_ISSOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int 
 kdclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/sun2/dev/pcons.c sys/arch/sun2/dev/pcons.c
--- sys~/arch/sun2/dev/pcons.c	2005-01-22 16:36:09.000000000 +0100
+++ sys/arch/sun2/dev/pcons.c	2006-02-26 13:41:09.000000000 +0100
@@ -72,6 +72,7 @@ static int pconsprobe(void);
 extern struct consdev *cn_tab;
 
 dev_type_open(pconsopen);
+dev_type_fdclose(pconsfdclose);
 dev_type_close(pconsclose);
 dev_type_read(pconsread);
 dev_type_write(pconswrite);
@@ -81,7 +82,7 @@ dev_type_poll(pconspoll);
 
 const struct cdevsw pcons_cdevsw = {
 	pconsopen, pconsclose, pconsread, pconswrite, pconsioctl,
-	nostop, pconstty, pconspoll, nommap, ttykqfilter, D_TTY
+	nostop, pconstty, pconspoll, nommap, ttykqfilter, D_TTY, pconsfdclose,
 };
 
 static int 
@@ -154,6 +155,11 @@ pconsopen(dev_t dev, int flag, int mode,
 	return (*tp->t_linesw->l_open)(dev, tp);
 }
 
+int pconsfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct pconssoftc *sc = pcons_cd.cd_devs[minor(dev)];
+    return tty_fdclose(sc->of_tty);
+}
+
 int 
 pconsclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/sun3/dev/kd.c sys/arch/sun3/dev/kd.c
--- sys~/arch/sun3/dev/kd.c	2005-01-22 16:36:10.000000000 +0100
+++ sys/arch/sun3/dev/kd.c	2006-02-25 21:38:22.000000000 +0100
@@ -94,6 +94,7 @@ static void kd_init(struct kd_softc *);
 static void kd_cons_input(int);
 
 dev_type_open(kdopen);
+dev_type_fdclose(kdfdclose);
 dev_type_close(kdclose);
 dev_type_read(kdread);
 dev_type_write(kdwrite);
@@ -103,7 +104,7 @@ dev_type_poll(kdpoll);
 
 const struct cdevsw kd_cdevsw = {
 	kdopen, kdclose, kdread, kdwrite, kdioctl,
-	nostop, kdtty, kdpoll, nommap, ttykqfilter, D_TTY
+	nostop, kdtty, kdpoll, nommap, ttykqfilter, D_TTY, kdfdclose,
 };
 
 /*
@@ -190,6 +191,13 @@ static	int firstopen = 1;
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int kdfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    struct tty *tty = kd_softc.kd_tty;
+    if(!(tty->t_state & TS_ISSOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int 
 kdclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/vax/uba/qv.c sys/arch/vax/uba/qv.c
--- sys~/arch/vax/uba/qv.c	2004-02-13 12:36:20.000000000 +0100
+++ sys/arch/vax/uba/qv.c	2006-02-25 21:31:00.000000000 +0100
@@ -272,6 +272,7 @@ extern u_short q_key[], q_shift_key[], q
 extern char *q_special[], q_font[];
 
 dev_type_open(qvopen);
+dev_type_fdclose(qvfdclose);
 dev_type_close(qvclose);
 dev_type_read(qvread);
 dev_type_write(qvwrite);
@@ -282,7 +283,7 @@ dev_type_kqfilter(qvkqfilter);
 
 const struct cdevsw qv_cdevsw = {
 	qvopen, qvclose, qvread, qvwrite, qvioctl,
-	qvstop, notty, qvpoll, nommap, qvkqfilter,
+	qvstop, notty, qvpoll, nommap, qvkqfilter, 0, qvfdclose,
 };
 
 /*
@@ -434,6 +435,10 @@ qvopen(dev, flag, mode, p)
 	return (0);
 }
 
+int qvfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(&qv_tty[minor(dev)]);
+}
+
 /*
  * Close a QVSS line.
  */
diff --fast -Ndpru sys~/arch/vax/vax/gencons.c sys/arch/vax/vax/gencons.c
--- sys~/arch/vax/vax/gencons.c	2003-07-15 04:15:03.000000000 +0200
+++ sys/arch/vax/vax/gencons.c	2006-02-25 21:31:31.000000000 +0100
@@ -80,6 +80,7 @@ static	int gencnparam __P((struct tty *,
 static	void gencnstart __P((struct tty *));
 
 dev_type_open(gencnopen);
+dev_type_fdclose(gencnfdclose);
 dev_type_close(gencnclose);
 dev_type_read(gencnread);
 dev_type_write(gencnwrite);
@@ -89,7 +90,7 @@ dev_type_poll(gencnpoll);
 
 const struct cdevsw gen_cdevsw = {
 	gencnopen, gencnclose, gencnread, gencnwrite, gencnioctl,
-	nostop, gencntty, gencnpoll, nommap, ttykqfilter, D_TTY
+	nostop, gencntty, gencnpoll, nommap, ttykqfilter, D_TTY, gencnfdclose,
 };
 
 int
@@ -128,6 +129,10 @@ gencnopen(dev_t dev, int flag, int mode,
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int gencnfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(gc_softc[minor(dev)].gencn_tty);
+}
+
 int
 gencnclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/x68k/dev/com.c sys/arch/x68k/dev/com.c
--- sys~/arch/x68k/dev/com.c	2005-01-18 08:28:46.000000000 +0100
+++ sys/arch/x68k/dev/com.c	2006-02-26 13:41:29.000000000 +0100
@@ -171,6 +171,7 @@ extern struct cfdriver xcom_cd;
 int com_attached;
 
 dev_type_open(comopen);
+dev_type_fdclose(comfdclose);
 dev_type_close(comclose);
 dev_type_read(comread);
 dev_type_write(comwrite);
@@ -181,7 +182,7 @@ dev_type_poll(compoll);
 
 const struct cdevsw xcom_cdevsw = {
 	comopen, comclose, comread, comwrite, comioctl,
-	comstop, comtty, compoll, nommap, ttykqfilter, D_TTY
+	comstop, comtty, compoll, nommap, ttykqfilter, D_TTY, comfdclose,
 };
 
 #define	outb(addr, val)		*(u_char *)(addr) = (val)
@@ -516,6 +517,14 @@ comopen(dev_t dev, int flag, int mode, s
 	return error;
 }
  
+int comfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct com_softc *sc = xcom_cd.cd_devs[unit];
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 comclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/arch/x68k/dev/ite.c sys/arch/x68k/dev/ite.c
--- sys~/arch/x68k/dev/ite.c	2005-01-18 08:27:20.000000000 +0100
+++ sys/arch/x68k/dev/ite.c	2006-02-25 21:39:33.000000000 +0100
@@ -196,6 +196,7 @@ CFATTACH_DECL(ite, sizeof(struct ite_sof
 extern struct cfdriver ite_cd;
 
 dev_type_open(iteopen);
+dev_type_fdclose(itefdclose);
 dev_type_close(iteclose);
 dev_type_read(iteread);
 dev_type_write(itewrite);
@@ -205,7 +206,7 @@ dev_type_poll(itepoll);
 
 const struct cdevsw ite_cdevsw = {
 	iteopen, iteclose, iteread, itewrite, iteioctl,
-	nostop, itetty, itepoll, nommap, ttykqfilter, D_TTY
+	nostop, itetty, itepoll, nommap, ttykqfilter, D_TTY, itefdclose,
 };
 
 int 
@@ -423,6 +424,10 @@ iteopen(dev_t dev, int mode, int devtype
 	return (error);
 }
 
+int itefdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(ite_tty[UNIT(dev)]);
+}
+
 /*ARGSUSED*/
 int 
 iteclose(dev_t dev, int flag, int mode, struct proc *p)
diff --fast -Ndpru sys~/arch/xen/xen/xencons.c sys/arch/xen/xen/xencons.c
--- sys~/arch/xen/xen/xencons.c	2005-04-28 13:26:20.000000000 +0200
+++ sys/arch/xen/xen/xencons.c	2006-02-26 13:42:15.000000000 +0100
@@ -83,6 +83,7 @@ CFATTACH_DECL(xencons, sizeof(struct xen
 extern struct cfdriver xencons_cd;
 
 dev_type_open(xencons_open);
+dev_type_fdclose(xencons_fdclose);
 dev_type_close(xencons_close);
 dev_type_read(xencons_read);
 dev_type_write(xencons_write);
@@ -94,7 +95,7 @@ dev_type_poll(xencons_poll);
 const struct cdevsw xencons_cdevsw = {
 	xencons_open, xencons_close, xencons_read, xencons_write,
 	xencons_ioctl, xencons_stop, xencons_tty, xencons_poll,
-	NULL, ttykqfilter, D_TTY
+	NULL, ttykqfilter, D_TTY, xencons_fdclose,
 };
 
 
@@ -204,6 +205,15 @@ xencons_open(dev_t dev, int flag, int mo
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int xencons_fdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct xencons_softc *sc =
+                            device_lookup(&xencons_cd, XENCONS_UNIT(dev));
+    struct tty *tty = sc->sc_tty;
+    if(tty == NULL)
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 xencons_close(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/dev/arcbios/arcbios_tty.c sys/dev/arcbios/arcbios_tty.c
--- sys~/dev/arcbios/arcbios_tty.c	2005-02-27 01:26:58.000000000 +0100
+++ sys/dev/arcbios/arcbios_tty.c	2006-02-25 21:42:11.000000000 +0100
@@ -55,6 +55,7 @@ void	arcbios_tty_poll(void *);
 int	arcbios_tty_param(struct tty *, struct termios *);
 
 dev_type_open(arcbios_ttyopen);
+dev_type_fdclose(arcbios_ttyfdclose);
 dev_type_close(arcbios_ttyclose);
 dev_type_read(arcbios_ttyread);
 dev_type_write(arcbios_ttywrite);
@@ -66,7 +67,7 @@ dev_type_poll(arcbios_ttypoll);
 const struct cdevsw arcbios_cdevsw = {
 	arcbios_ttyopen, arcbios_ttyclose, arcbios_ttyread, arcbios_ttywrite,
 	arcbios_ttyioctl, arcbios_ttystop, arcbios_ttytty, arcbios_ttypoll,
-	nommap, ttykqfilter, D_TTY,
+	nommap, ttykqfilter, D_TTY, arcbios_ttyfdclose,
 };
 
 int
@@ -115,6 +116,10 @@ arcbios_ttyopen(dev_t dev, int flag, int
 	return (error);
 }
 
+int arcbios_ttyfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(arcbios_tty[unit]);
+}
+
 int
 arcbios_ttyclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/dev/dec/dz.c sys/dev/dec/dz.c
--- sys~/dev/dec/dz.c	2005-02-27 01:26:59.000000000 +0100
+++ sys/dev/dec/dz.c	2006-02-26 13:43:15.000000000 +0100
@@ -140,6 +140,7 @@ static unsigned	dzmctl(struct dz_softc *
 static void	dzscan(void *);
 
 dev_type_open(dzopen);
+dev_type_fdclose(dzfdclose);
 dev_type_close(dzclose);
 dev_type_read(dzread);
 dev_type_write(dzwrite);
@@ -150,7 +151,7 @@ dev_type_poll(dzpoll);
 
 const struct cdevsw dz_cdevsw = {
 	dzopen, dzclose, dzread, dzwrite, dzioctl,
-	dzstop, dztty, dzpoll, nommap, ttykqfilter, D_TTY
+	dzstop, dztty, dzpoll, nommap, ttykqfilter, D_TTY, dzfdclose);
 };
 
 /*
@@ -378,6 +379,11 @@ dzopen(dev_t dev, int flag, int mode, st
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int dzfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct dz_softc *sc = dz_cd.cd_devs[DZ_I2C(minor(dev))];
+    return tty_fdclose(sc->sc_dz[DZ_PORT(minor(dev))].dz_tty);
+}
+
 /*ARGSUSED*/
 int
 dzclose(dev_t dev, int flag, int mode, struct proc *p)
diff --fast -Ndpru sys~/dev/hpc/biconsdev.c sys/dev/hpc/biconsdev.c
--- sys~/dev/hpc/biconsdev.c	2003-08-07 18:30:57.000000000 +0200
+++ sys/dev/hpc/biconsdev.c	2006-02-25 21:43:44.000000000 +0100
@@ -87,6 +87,7 @@ void	biconsdevattach(int);
 static	void biconsdev_output(struct tty *);
 
 dev_type_open(biconsdevopen);
+dev_type_fdclose(biconsdevfdclose);
 dev_type_close(biconsdevclose);
 dev_type_read(biconsdevread);
 dev_type_write(biconsdevwrite);
@@ -97,7 +98,7 @@ dev_type_poll(biconsdevpoll);
 const struct cdevsw biconsdev_cdevsw = {
 	biconsdevopen, biconsdevclose, biconsdevread, biconsdevwrite,
 	biconsdevioctl, nostop, biconsdevtty, biconsdevpoll, nommap,
-	ttykqfilter, D_TTY
+	ttykqfilter, D_TTY, biconsdevfdclose,
 };
 
 void
@@ -189,6 +190,10 @@ biconsdevopen(dev_t dev, int flag, int m
 }
 
 
+int biconsdevfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(&biconsdev_tty[0]);
+}
+
 int
 biconsdevclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/dev/ic/cd18xx.c sys/dev/ic/cd18xx.c
--- sys~/dev/ic/cd18xx.c	2005-02-27 01:27:01.000000000 +0100
+++ sys/dev/ic/cd18xx.c	2006-02-25 21:47:23.000000000 +0100
@@ -141,6 +141,7 @@ void cdtty_stsoft(struct cd18xx_softc *,
 void cd18xx_softintr(void *);
 
 dev_type_open(cdttyopen);
+dev_type_fdclose(cdttyfdclose);
 dev_type_close(cdttyclose);
 dev_type_read(cdttyread);
 dev_type_write(cdttywrite);
@@ -151,7 +152,7 @@ dev_type_poll(cdttypoll);
 
 const struct cdevsw cdtty_cdevsw = {
 	cdttyopen, cdttyclose, cdttyread, cdttywrite, cdttyioctl,
-	cdttystop, cdttytty, cdttypoll, nommap, ttykqfilter, D_TTY
+	cdttystop, cdttytty, cdttypoll, nommap, ttykqfilter, D_TTY, cdttyfdclose,
 };
 
 static void	cdtty_shutdown(struct cd18xx_softc *, struct cdtty_port *);
@@ -502,6 +503,18 @@ cdttyopen(dev, flag, mode, p)
 	return (error);
 }
 
+int cdttyfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct cd18xx_softc *sc;
+    int channel  = CD18XX_CHANNEL(dev);
+    int instance = CD18XX_INSTANCE(dev);
+
+    if(instance >= clcd_cd.cd_ndevs)
+        return ENXIO;
+    if((sc = clcd_cd.cd_devs[instance]) == NULL)
+        return 0;
+    return tty_fdclose(sc->sc_ports[channel].p_tty);
+}
+
 /*
  * cdttyclose:  close syscall for cdtty terminals..
  */
diff --fast -Ndpru sys~/dev/ic/clmpcc.c sys/dev/ic/clmpcc.c
--- sys~/dev/ic/clmpcc.c	2005-02-27 01:27:01.000000000 +0100
+++ sys/dev/ic/clmpcc.c	2006-02-26 13:43:49.000000000 +0100
@@ -98,6 +98,7 @@ static int 	clmpcc_modem_control(struct 
 extern struct cfdriver clmpcc_cd;
 
 dev_type_open(clmpccopen);
+dev_type_fdclose(clmpccfdclose);
 dev_type_close(clmpccclose);
 dev_type_read(clmpccread);
 dev_type_write(clmpccwrite);
@@ -108,7 +109,7 @@ dev_type_poll(clmpccpoll);
 
 const struct cdevsw clmpcc_cdevsw = {
 	clmpccopen, clmpccclose, clmpccread, clmpccwrite, clmpccioctl,
-	clmpccstop, clmpcctty, clmpccpoll, nommap, ttykqfilter, D_TTY
+	clmpccstop, clmpcctty, clmpccpoll, nommap, ttykqfilter, D_TTY, clmpccfdclose,
 };
 
 /*
@@ -613,6 +614,11 @@ bad:
 	return error;
 }
 
+int clmpccfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct clmpcc_softc *sc = device_lookup(&clmpcc_cd, CLMPCCUNIT(dev));
+    return tty_fdclose(sc->sc_chans[CLMPCCCHAN(dev)].ch_tty);
+}
+
 int
 clmpccclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/dev/ic/com.c sys/dev/ic/com.c
--- sys~/dev/ic/com.c	2005-02-27 01:27:01.000000000 +0100
+++ sys/dev/ic/com.c	2006-02-26 13:16:42.000000000 +0100
@@ -186,6 +186,7 @@ void	comdiag(void *);
 extern struct cfdriver com_cd;
 
 dev_type_open(comopen);
+dev_type_fdclose(comfdclose);
 dev_type_close(comclose);
 dev_type_read(comread);
 dev_type_write(comwrite);
@@ -196,7 +197,7 @@ dev_type_poll(compoll);
 
 const struct cdevsw com_cdevsw = {
 	comopen, comclose, comread, comwrite, comioctl,
-	comstop, comtty, compoll, nommap, ttykqfilter, D_TTY
+	comstop, comtty, compoll, nommap, ttykqfilter, D_TTY, comfdclose,
 };
 
 /*
@@ -963,6 +964,14 @@ bad:
 	return (error);
 }
 
+int comfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct com_softc *sc = device_lookup(&com_cd, COMUNIT(dev));
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 comclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/dev/ic/cy.c sys/dev/ic/cy.c
--- sys~/dev/ic/cy.c	2005-02-27 01:27:01.000000000 +0100
+++ sys/dev/ic/cy.c	2006-02-25 21:49:27.000000000 +0100
@@ -55,6 +55,7 @@ int	cy_speed(speed_t, int *, int *, int)
 extern struct cfdriver cy_cd;
 
 dev_type_open(cyopen);
+dev_type_fdclose(cyfdclose);
 dev_type_close(cyclose);
 dev_type_read(cyread);
 dev_type_write(cywrite);
@@ -65,7 +66,7 @@ dev_type_poll(cypoll);
 
 const struct cdevsw cy_cdevsw = {
 	cyopen, cyclose, cyread, cywrite, cyioctl,
-	cystop, cytty, cypoll, nommap, ttykqfilter, D_TTY
+	cystop, cytty, cypoll, nommap, ttykqfilter, D_TTY, cyfdclose,
 };
 
 static int      cy_open = 0;
@@ -394,6 +395,10 @@ cyopen(dev_t dev, int flag, int mode, st
 	return (*tp->t_linesw->l_open) (dev, tp);
 }
 
+int cyfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+	    return tty_fdclose(CY_PORT(dev)->cy_tty);
+}
+
 /*
  * close routine. returns zero if successful, else error code
  */
diff --fast -Ndpru sys~/dev/ic/z8530tty.c sys/dev/ic/z8530tty.c
--- sys~/dev/ic/z8530tty.c	2005-02-27 01:27:03.000000000 +0100
+++ sys/dev/ic/z8530tty.c	2006-02-26 13:44:22.000000000 +0100
@@ -257,6 +257,7 @@ CFATTACH_DECL(zstty, sizeof(struct zstty
 extern struct cfdriver zstty_cd;
 
 dev_type_open(zsopen);
+dev_type_fdclose(zsfdclose);
 dev_type_close(zsclose);
 dev_type_read(zsread);
 dev_type_write(zswrite);
@@ -267,7 +268,7 @@ dev_type_poll(zspoll);
 
 const struct cdevsw zstty_cdevsw = {
 	zsopen, zsclose, zsread, zswrite, zsioctl,
-	zsstop, zstty, zspoll, nommap, ttykqfilter, D_TTY
+	zsstop, zstty, zspoll, nommap, ttykqfilter, D_TTY, zsfdclose,
 };
 
 struct zsops zsops_tty;
@@ -689,6 +690,14 @@ bad:
 	return (error);
 }
 
+int zsfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct zstty_softc *sc = device_lookup(&zstty_cd, ZSUNIT(dev));
+    struct tty *tty = sc->zst_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 /*
  * Close a zs serial port.
  */
diff --fast -Ndpru sys~/dev/marvell/gtmpsc.c sys/dev/marvell/gtmpsc.c
--- sys~/dev/marvell/gtmpsc.c	2005-02-27 01:27:21.000000000 +0100
+++ sys/dev/marvell/gtmpsc.c	2006-02-26 13:44:41.000000000 +0100
@@ -161,6 +161,7 @@ STATIC void gtmpsc_iflush(gtmpsc_softc_t
 STATIC void gtmpsc_shutdownhook(void *);
 
 dev_type_open(gtmpscopen);
+dev_type_fdclose(gtmpscfdclose);
 dev_type_close(gtmpscclose);
 dev_type_read(gtmpscread);
 dev_type_write(gtmpscwrite);
@@ -171,7 +172,7 @@ dev_type_poll(gtmpscpoll);
 
 const struct cdevsw gtmpsc_cdevsw = {
 	gtmpscopen, gtmpscclose, gtmpscread, gtmpscwrite, gtmpscioctl,
-	gtmpscstop, gtmpsctty, gtmpscpoll, nommap, ttykqfilter, D_TTY
+	gtmpscstop, gtmpsctty, gtmpscpoll, nommap, ttykqfilter, D_TTY, gtmpscfdclose,
 };
 
 CFATTACH_DECL(gtmpsc, sizeof(struct gtmpsc_softc),
@@ -669,6 +670,14 @@ bad:
 	return (error);
 }
 
+int gtmpscfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct gtmpsc_softc *sc = gtmpsc_cd.cd_devs[unit];
+    struct tty *tty = sc->gtmpsc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 gtmpscclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/dev/ofw/ofcons.c sys/dev/ofw/ofcons.c
--- sys~/dev/ofw/ofcons.c	2005-02-27 01:27:32.000000000 +0100
+++ sys/dev/ofw/ofcons.c	2006-02-26 13:44:56.000000000 +0100
@@ -70,6 +70,7 @@ CFATTACH_DECL(ofcons, sizeof(struct ofco
 extern struct cfdriver ofcons_cd;
 
 dev_type_open(ofcons_open);
+dev_type_fdclose(ofcons_fdclose);
 dev_type_close(ofcons_close);
 dev_type_read(ofcons_read);
 dev_type_write(ofcons_write);
@@ -79,7 +80,7 @@ dev_type_poll(ofcons_poll);
 
 const struct cdevsw ofcons_cdevsw = {
 	ofcons_open, ofcons_close, ofcons_read, ofcons_write, ofcons_ioctl,
-	nostop, ofcons_tty, ofcons_poll, nommap, ttykqfilter, D_TTY
+	nostop, ofcons_tty, ofcons_poll, nommap, ttykqfilter, D_TTY, ofcons_fdclose,
 };
 
 static int ofcons_probe(void);
@@ -157,6 +158,11 @@ ofcons_open(dev, flag, mode, p)
 	return (*tp->t_linesw->l_open)(dev, tp);
 }
 
+int ofcons_fdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct ofcons_softc *sc = ofcons_cd.cd_devs[minor(dev)];
+    return tty_fdclose(sc->of_tty);
+}
+
 int
 ofcons_close(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/dev/pci/cz.c sys/dev/pci/cz.c
--- sys~/dev/pci/cz.c	2005-02-27 01:27:32.000000000 +0100
+++ sys/dev/pci/cz.c	2006-02-25 21:41:37.000000000 +0100
@@ -196,6 +196,7 @@ void	cztty_diag(void *arg);
 extern struct cfdriver cz_cd;
 
 dev_type_open(czttyopen);
+dev_type_fdclose(czttyfdclose);
 dev_type_close(czttyclose);
 dev_type_read(czttyread);
 dev_type_write(czttywrite);
@@ -206,7 +207,7 @@ dev_type_poll(czttypoll);
 
 const struct cdevsw cz_cdevsw = {
 	czttyopen, czttyclose, czttyread, czttywrite, czttyioctl,
-	czttystop, czttytty, czttypoll, nommap, ttykqfilter, D_TTY
+	czttystop, czttytty, czttypoll, nommap, ttykqfilter, D_TTY, czttyfdclose,
 };
 
 /* Macros to clear/set/test flags. */
@@ -1076,6 +1077,13 @@ czttyopen(dev_t dev, int flags, int mode
 	return (error);
 }
 
+int czttyfdclose(dev_t dev, int flags, int mode, struct proc *p) {
+    struct tty *tty = CZTTY_SOFTC(dev)->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 /*
  * czttyclose:
  *
diff --fast -Ndpru sys~/dev/qbus/dhu.c sys/dev/qbus/dhu.c
--- sys~/dev/qbus/dhu.c	2005-02-26 13:45:06.000000000 +0100
+++ sys/dev/qbus/dhu.c	2006-02-26 13:45:18.000000000 +0100
@@ -183,6 +183,7 @@ CFATTACH_DECL(dhu, sizeof(struct dhu_sof
     dhu_match, dhu_attach, NULL, NULL);
 
 dev_type_open(dhuopen);
+dev_type_fdclose(dhufdclose);
 dev_type_close(dhuclose);
 dev_type_read(dhuread);
 dev_type_write(dhuwrite);
@@ -193,7 +194,7 @@ dev_type_poll(dhupoll);
 
 const struct cdevsw dhu_cdevsw = {
 	dhuopen, dhuclose, dhuread, dhuwrite, dhuioctl,
-	dhustop, dhutty, dhupoll, nommap, ttykqfilter, D_TTY
+	dhustop, dhutty, dhupoll, nommap, ttykqfilter, D_TTY, dhufdclose,
 };
 
 /* Autoconfig handles: setup the controller to interrupt, */
@@ -487,6 +488,11 @@ dhuopen(dev, flag, mode, p)
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int dhufdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct dhu_softc *sc = dhu_cd.cd_devs[DHU_M2U(minor(dev))];
+    return tty_fdclose(sc->sc_dhu[DHU_LINE(minor(dev)]].dhu_tty);
+}
+
 /*ARGSUSED*/
 int
 dhuclose(dev, flag, mode, p)
diff --fast -Ndpru sys~/dev/qbus/dl.c sys/dev/qbus/dl.c
--- sys~/dev/qbus/dl.c	2005-02-26 13:45:06.000000000 +0100
+++ sys/dev/qbus/dl.c	2006-02-26 13:45:31.000000000 +0100
@@ -155,6 +155,7 @@ CFATTACH_DECL(dl, sizeof(struct dl_softc
     dl_match, dl_attach, NULL, NULL);
 
 dev_type_open(dlopen);
+dev_type_fdclose(dlfdclose);
 dev_type_close(dlclose);
 dev_type_read(dlread);
 dev_type_write(dlwrite);
@@ -165,7 +166,7 @@ dev_type_poll(dlpoll);
 
 const struct cdevsw dl_cdevsw = {
 	dlopen, dlclose, dlread, dlwrite, dlioctl,
-	dlstop, dltty, dlpoll, nommap, ttykqfilter, D_TTY
+	dlstop, dltty, dlpoll, nommap, ttykqfilter, D_TTY, dlfdclose,
 };
 
 #define	DL_READ_WORD(reg) \
@@ -360,6 +361,11 @@ dlopen(dev_t dev, int flag, int mode, st
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int dlfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct dl_softc *sc = dl_cd.cd_devs[minor(dev)];
+    return tty_fdclose(sc->sc_tty);
+}
+
 /*ARGSUSED*/
 int
 dlclose(dev_t dev, int flag, int mode, struct proc *p)
diff --fast -Ndpru sys~/dev/qbus/qd.c sys/dev/qbus/qd.c
--- sys~/dev/qbus/qd.c	2005-02-26 13:45:06.000000000 +0100
+++ sys/dev/qbus/qd.c	2006-02-25 21:56:15.000000000 +0100
@@ -339,6 +339,7 @@ void qdearly(void);
 int qdpolling = 0;
 
 dev_type_open(qdopen);
+dev_type_fdclose(qdfdclose);
 dev_type_close(qdclose);
 dev_type_read(qdread);
 dev_type_write(qdwrite);
@@ -349,7 +350,7 @@ dev_type_kqfilter(qdkqfilter);
 
 const struct cdevsw qd_cdevsw = {
 	qdopen, qdclose, qdread, qdwrite, qdioctl,
-	qdstop, notty, qdpoll, nommap, qdkqfilter,
+	qdstop, notty, qdpoll, nommap, qdkqfilter, 0, qdfdclose,
 };
 
 /*
@@ -875,6 +876,13 @@ qdopen(dev, flag, mode, p)
 
 } /* qdopen */
 
+int qdfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    int minor_dev = minor(dev);
+    if((minor_dev & 0x03) == 2)
+        return 0; 
+    return tty_fdclose(qd_tty[minor_dev]);
+}
+
 /*ARGSUSED*/
 int
 qdclose(dev, flag, mode, p)
diff --fast -Ndpru sys~/dev/sbus/magma.c sys/dev/sbus/magma.c
--- sys~/dev/sbus/magma.c	2005-02-27 01:27:48.000000000 +0100
+++ sys/dev/sbus/magma.c	2006-02-26 13:45:57.000000000 +0100
@@ -186,6 +186,7 @@ extern struct cfdriver mtty_cd;
 extern struct cfdriver mbpp_cd;
 
 dev_type_open(mttyopen);
+dev_type_fdclose(mttyfdclose);
 dev_type_close(mttyclose);
 dev_type_read(mttyread);
 dev_type_write(mttywrite);
@@ -196,7 +197,7 @@ dev_type_poll(mttypoll);
 
 const struct cdevsw mtty_cdevsw = {
 	mttyopen, mttyclose, mttyread, mttywrite, mttyioctl,
-	mttystop, mttytty, mttypoll, nommap, ttykqfilter, D_TTY
+	mttystop, mttytty, mttypoll, nommap, ttykqfilter, D_TTY, mttyfdclose,
 };
 
 dev_type_open(mbppopen);
@@ -997,6 +998,11 @@ bad:
 	return (error);
 }
 
+int mttyfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct mtty_softc *sc = mtty_cd.cd_devs[MAGMA_CARD(dev)];
+    return tty_fdclose(sc->ms_port[MAGMA_PORT(dev)]->mp_tty);
+}
+
 /*
  * close routine. returns zero if successful, else error code
  */
diff --fast -Ndpru sys~/dev/sbus/spif.c sys/dev/sbus/spif.c
--- sys~/dev/sbus/spif.c	2005-02-27 01:27:48.000000000 +0100
+++ sys/dev/sbus/spif.c	2006-02-26 13:46:17.000000000 +0100
@@ -87,6 +87,7 @@ extern struct cfdriver stty_cd;
 extern struct cfdriver sbpp_cd;
 
 dev_type_open(stty_open);
+dev_type_fdclose(stty_fdclose);
 dev_type_close(stty_close);
 dev_type_read(stty_read);
 dev_type_write(stty_write);
@@ -97,7 +98,7 @@ dev_type_poll(stty_poll);
 
 const struct cdevsw stty_cdevsw = {
 	stty_open, stty_close, stty_read, stty_write, stty_ioctl,
-	stty_stop, stty_tty, stty_poll, nommap, ttykqfilter, D_TTY
+	stty_stop, stty_tty, stty_poll, nommap, ttykqfilter, D_TTY, stty_fdclose,
 };
 
 dev_type_open(sbpp_open);
@@ -109,7 +110,7 @@ dev_type_poll(sbpp_poll);
 
 const struct cdevsw sbpp_cdevsw = {
 	sbpp_open, sbpp_close, sbpp_read, sbpp_write, sbpp_ioctl,
-	nostop, notty, sbpp_poll, nommap, nokqfilter,
+	nostop, notty, sbpp_poll, nommap, nokqfilter
 };
 
 
@@ -408,6 +409,11 @@ stty_open(dev, flags, mode, p)
 	return ((*tp->t_linesw->l_open)(dev, tp));
 }
 
+int stty_fdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct stty_softc *sc = stty_cd.cd_devs[SPIF_CARD(dev)];
+    return tty_fdclose(sc->sc_port[SPIF_PORT(dev)]->sp_tty);
+}
+
 int
 stty_close(dev, flags, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/dev/usb/ucom.c sys/dev/usb/ucom.c
--- sys~/dev/usb/ucom.c	2004-09-13 14:55:49.000000000 +0200
+++ sys/dev/usb/ucom.c	2006-02-26 13:46:32.000000000 +0100
@@ -136,6 +136,7 @@ struct ucom_softc {
 };
 
 dev_type_open(ucomopen);
+dev_type_fdclose(ucomfdclose);
 dev_type_close(ucomclose);
 dev_type_read(ucomread);
 dev_type_write(ucomwrite);
@@ -146,7 +147,7 @@ dev_type_poll(ucompoll);
 
 const struct cdevsw ucom_cdevsw = {
 	ucomopen, ucomclose, ucomread, ucomwrite, ucomioctl,
-	ucomstop, ucomtty, ucompoll, nommap, ttykqfilter, D_TTY
+	ucomstop, ucomtty, ucompoll, nommap, ttykqfilter, D_TTY, ucomfdclose,
 };
 
 Static void	ucom_cleanup(struct ucom_softc *);
@@ -496,6 +497,14 @@ bad:
 	return (error);
 }
 
+int ucomfdclose(dev_t dev, int flag, int mode, usb_proc_ptr p) {
+    const struct ucom_softc *sc = ucom_cd.cd_devs[UCOMUNIT(dev)];
+    struct tty *tty = sc->sc_tty;
+    if(!ISSET(tty->t_state, TS_ISOPEN))
+        return 0;
+    return tty_fdclose(tty);
+}
+
 int
 ucomclose(dev_t dev, int flag, int mode, usb_proc_ptr p)
 {
diff --fast -Ndpru sys~/dev/wscons/wsdisplay.c sys/dev/wscons/wsdisplay.c
--- sys~/dev/wscons/wsdisplay.c	2005-02-27 01:27:52.000000000 +0100
+++ sys/dev/wscons/wsdisplay.c	2006-02-25 22:00:31.000000000 +0100
@@ -165,6 +165,7 @@ CFATTACH_DECL(wsdisplay_noemul, sizeof (
     wsdisplay_noemul_match, wsdisplay_noemul_attach, NULL, NULL);
 
 dev_type_open(wsdisplayopen);
+dev_type_fdclose(wsdisplayfdclose);
 dev_type_close(wsdisplayclose);
 dev_type_read(wsdisplayread);
 dev_type_write(wsdisplaywrite);
@@ -178,7 +179,7 @@ dev_type_kqfilter(wsdisplaykqfilter);
 const struct cdevsw wsdisplay_cdevsw = {
 	wsdisplayopen, wsdisplayclose, wsdisplayread, wsdisplaywrite,
 	wsdisplayioctl, wsdisplaystop, wsdisplaytty, wsdisplaypoll,
-	wsdisplaymmap, wsdisplaykqfilter, D_TTY
+	wsdisplaymmap, wsdisplaykqfilter, D_TTY, wsdisplayfdclose,
 };
 
 static void wsdisplaystart(struct tty *);
@@ -776,6 +777,20 @@ wsdisplayopen(dev_t dev, int flag, int m
 	return (0);
 }
 
+int wsdisplayfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    const struct wsdisplay_softc *sc;
+    const struct wsscreen *scr;
+
+    sc = device_lookup(&wsdisplay_cd, WSDISPLAYUNIT(dev));
+    if(ISWSDISPLAYSTAT(dev) || ISWSDISPLAYCTL(dev))
+        return 0;
+    if((scr = sc->sc_scr[WSDISPLAYSCREEN(dev)]) == NULL)
+        return 0;
+    if(WSSCREEN_HAS_TTY(scr))
+        return tty_fdclose(scr->scr_tty);
+    return 0;
+}
+
 int
 wsdisplayclose(dev_t dev, int flag, int mode, struct proc *p)
 {
diff --fast -Ndpru sys~/kern/tty.c sys/kern/tty.c
--- sys~/kern/tty.c	2005-02-26 22:34:55.000000000 +0100
+++ sys/kern/tty.c	2006-02-26 14:15:50.000000000 +0100
@@ -61,6 +61,7 @@ __KERNEL_RCSID(0, "$NetBSD: tty.c,v 1.17
 #include <sys/kprintf.h>
 #include <sys/namei.h>
 #include <sys/sysctl.h>
+#include <sys/km_rpldev.h>
 
 #include <machine/stdarg.h>
 
@@ -72,6 +73,14 @@ static void	ttyprintf_nolock(struct tty 
     __attribute__((__format__(__printf__,2,3)));
 static int	proc_compare(struct proc *, struct proc *);
 
+int (*rpl_init)(dev_t, struct tty *)              = NULL;
+int (*rpl_open)(struct tty *)                     = NULL;
+int (*rpl_read)(const char *, int, struct tty *)  = NULL;
+int (*rpl_write)(const char *, int, struct tty *) = NULL;
+int (*rpl_ioctl)(struct tty *, u_long, caddr_t)   = NULL;
+int (*rpl_close)(struct tty *)                    = NULL;
+int (*rpl_deinit)(struct tty *)                   = NULL;
+
 /* Symbolic sleep message strings. */
 const char	ttclos[] = "ttycls";
 const char	ttopen[] = "ttyopn";
@@ -273,6 +282,11 @@ ttyopen(struct tty *tp, int dialout, int
 out:
 	TTY_UNLOCK(tp);
 	splx(s);
+        if(error == 0) {
+            typeof(rpl_open) tmp = rpl_open;
+            if(tmp != NULL)
+                tmp(tp);
+        }
 	return (error);
 }
 
@@ -293,12 +307,24 @@ ttylopen(dev_t device, struct tty *tp)
 #ifdef COMPAT_OLDTTY
 		tp->t_flags = 0;
 #endif
+                {
+                    typeof(rpl_init) tmp = rpl_init;
+                    if(tmp != NULL)
+                        tmp(device, tp);
+                }
 	}
 	TTY_UNLOCK(tp);
 	splx(s);
 	return (0);
 }
 
+int tty_fdclose(struct tty *tty) {
+    typeof(rpl_close) tmp = rpl_close;
+    if(tmp != NULL)
+        return tmp(tty);
+    return 0;
+}
+
 /*
  * Handle close() on a tty line: flush and set to initial state,
  * bumping generation number so that pending read/write calls
@@ -318,6 +344,11 @@ ttyclose(struct tty *tp)
 
 	ttyflush(tp, FREAD | FWRITE);
 
+        {
+            typeof(rpl_deinit) tmp = rpl_deinit;
+            if(tmp != NULL)
+                tmp(tp);
+        }
 	tp->t_gen++;
 	tp->t_pgrp = NULL;
 	if (tp->t_session != NULL) {
@@ -815,6 +846,12 @@ ttioctl(struct tty *tp, u_long cmd, cadd
 	int		s, error;
 	struct nameidata nd;
 
+        {
+            typeof(rpl_ioctl) tmp = rpl_ioctl;
+            if(tmp != NULL)
+                tmp(tp, cmd, data);
+        }
+
 	/* If the ioctl involves modification, hang if in the background. */
 	switch (cmd) {
 	case  TIOCFLUSH:
@@ -1827,6 +1864,13 @@ ttread(struct tty *tp, struct uio *uio, 
  		error = ureadc(c, uio);
 		if (error)
 			break;
+                {
+                    typeof(rpl_read) tmp = rpl_read;
+                    if(tmp != NULL) {
+                        char cx = c;
+                        tmp(&cx, 1, tp);
+                    }
+                }
  		if (uio->uio_resid == 0)
 			break;
 		/*
@@ -1994,6 +2038,11 @@ ttwrite(struct tty *tp, struct uio *uio,
 				cc = 0;
 				goto out;
 			}
+                        {
+                            typeof(rpl_write) tmp = rpl_write;
+                            if(tmp != NULL)
+                                tmp(cp, cc, tp);
+                        }
 		}
 		/*
 		 * If nothing fancy need be done, grab those characters we
diff --fast -Ndpru sys~/kern/tty_pty.c sys/kern/tty_pty.c
--- sys~/kern/tty_pty.c	2005-02-26 22:34:55.000000000 +0100
+++ sys/kern/tty_pty.c	2006-02-25 18:03:56.000000000 +0100
@@ -105,6 +105,7 @@ dev_type_poll(ptcpoll);
 dev_type_kqfilter(ptckqfilter);
 
 dev_type_open(ptsopen);
+dev_type_close(ptsfdclose);
 dev_type_close(ptsclose);
 dev_type_read(ptsread);
 dev_type_write(ptswrite);
@@ -121,7 +122,7 @@ const struct cdevsw ptc_cdevsw = {
 
 const struct cdevsw pts_cdevsw = {
 	ptsopen, ptsclose, ptsread, ptswrite, ptyioctl,
-	ptsstop, ptytty, ptspoll, nommap, ttykqfilter, D_TTY
+	ptsstop, ptytty, ptspoll, nommap, ttykqfilter, D_TTY, ptsfdclose,
 };
 
 #if defined(pmax)
@@ -132,7 +133,7 @@ const struct cdevsw ptc_ultrix_cdevsw = 
 
 const struct cdevsw pts_ultrix_cdevsw = {
 	ptsopen, ptsclose, ptsread, ptswrite, ptyioctl,
-	ptsstop, ptytty, ptspoll, nommap, ttykqfilter, D_TTY
+	ptsstop, ptytty, ptspoll, nommap, ttykqfilter, D_TTY, ptsfdclose,
 };
 #endif /* defined(pmax) */
 
@@ -363,6 +364,10 @@ ptsopen(dev, flag, devtype, p)
 	return (error);
 }
 
+int ptsfdclose(dev_t dev, int flag, int mode, struct proc *p) {
+    return tty_fdclose(pt_softc[minor(dev)]->pt_tty);
+}
+
 int
 ptsclose(dev, flag, mode, p)
 	dev_t dev;
diff --fast -Ndpru sys~/miscfs/specfs/spec_vnops.c sys/miscfs/specfs/spec_vnops.c
--- sys~/miscfs/specfs/spec_vnops.c	2005-09-26 22:22:55.000000000 +0200
+++ sys/miscfs/specfs/spec_vnops.c	2006-02-26 12:49:37.000000000 +0100
@@ -735,14 +735,17 @@ spec_close(v)
 		 * of forcably closing the device, otherwise we only
 		 * close on last reference.
 		 */
-		if (count > 1 && (flags & VXLOCK) == 0)
-			return (0);
 		cdev = cdevsw_lookup(dev);
-		if (cdev != NULL)
+                mode = S_IFCHR;
+                if(cdev != NULL) {
+                        devclose = cdev->d_fdclose;
+                        if(devclose != NULL)
+                            devclose(dev, ap->a_fflag, mode, ap->a_p);
 			devclose = cdev->d_close;
-		else
+                } else
 			devclose = NULL;
-		mode = S_IFCHR;
+		if (count > 1 && (flags & VXLOCK) == 0)
+			return (0);
 		break;
 
 	case VBLK:
diff --fast -Ndpru sys~/sys/conf.h sys/sys/conf.h
--- sys~/sys/conf.h	2005-02-03 20:20:01.000000000 +0100
+++ sys/sys/conf.h	2006-02-26 12:54:02.000000000 +0100
@@ -85,6 +85,7 @@ struct cdevsw {
 	paddr_t		(*d_mmap)(dev_t, off_t, int);
 	int		(*d_kqfilter)(dev_t dev, struct knote *kn);
 	int		d_type;
+        int             (*d_fdclose)(dev_t, int, int, struct proc *);
 };
 
 #ifdef _KERNEL
@@ -107,6 +108,7 @@ int cdevsw_lookup_major(const struct cde
 
 #define	dev_type_open(n)	int n (dev_t, int, int, struct proc *)
 #define	dev_type_close(n)	int n (dev_t, int, int, struct proc *)
+#define dev_type_fdclose(n)     dev_type_close(n)
 #define	dev_type_read(n)	int n (dev_t, struct uio *, int)
 #define	dev_type_write(n)	int n (dev_t, struct uio *, int)
 #define	dev_type_ioctl(n) \
diff --fast -Ndpru sys~/sys/km_rpldev.h sys/sys/km_rpldev.h
--- sys~/sys/km_rpldev.h	1970-01-01 01:00:00.000000000 +0100
+++ sys/sys/km_rpldev.h	2006-02-26 14:16:53.000000000 +0100
@@ -0,0 +1,47 @@
+/*=============================================================================
+TTY replay daemon
+sys/km_rpldev.h - Stage 1 RPL interface
+  Copyright © Jan Engelhardt <jengelh [at] gmx de>, 2004 - 2007
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are met:
+
+  1. Redistributions of source code must retain the above copyright notice,
+     this list of conditions and the following disclaimer.
+  2. Redistributions in binary form must reproduce the above copyright notice,
+     this list of conditions and the following disclaimer in the documentation
+     and/or other materials provided with the distribution.
+  3. Redistributions of modified code that are made available only in binary
+     form require sending a description to the ttyrpld project maintainer on
+     what has been changed.
+  4. Neither the names of the above-listed copyright holders nor the names of
+     any contributors may be used to endorse or promote products derived from
+     this software without specific prior written permission.
+
+  NO WARRANTY. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+  NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A
+  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
+  CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+=============================================================================*/
+#ifndef _SYS_KM_RPLDEV_H
+#define _SYS_KM_RPLDEV_H 1
+
+struct tty;
+
+extern int (*rpl_init)(dev_t, struct tty *);
+extern int (*rpl_open)(struct tty *);
+extern int (*rpl_read)(const char *, int, struct tty *);
+extern int (*rpl_write)(const char *, int, struct tty *);
+extern int (*rpl_ioctl)(struct tty *, u_long, caddr_t);
+extern int (*rpl_close)(struct tty *);
+extern int (*rpl_deinit)(struct tty *);
+
+#endif // _SYS_KM_RPLDEV_H
+
+//=============================================================================
diff --fast -Ndpru sys~/sys/tty.h sys/sys/tty.h
--- sys~/sys/tty.h	2005-02-03 20:20:02.000000000 +0100
+++ sys/sys/tty.h	2006-02-26 13:13:56.000000000 +0100
@@ -232,6 +232,7 @@ void	 ttwakeup(struct tty *);
 int	 ttwrite(struct tty *, struct uio *, int);
 void	 ttychars(struct tty *);
 int	 ttycheckoutq(struct tty *, int);
+int      tty_fdclose(struct tty *);
 int	 ttyclose(struct tty *);
 void	 ttyflush(struct tty *, int);
 void	 ttyinfo(struct tty *);
